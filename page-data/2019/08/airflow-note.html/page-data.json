{"componentChunkName":"component---src-templates-post-template-js","path":"/2019/08/airflow-note.html","result":{"data":{"markdownRemark":{"id":"0b51a98c-a333-5685-a6c2-d40789338d67","html":"<p>Một số ghi chép, tips &#x26; tricks của mình trong quá trình sử dụng Apache Airflow.</p>\n<ul>\n<li>\n<p>Viết các functions (tasks) luôn cho mọi kết quả giống nhau với các input giống nhau (stateless).</p>\n<ul>\n<li>Tránh sử dụng global variables, random values, hardware timers.</li>\n</ul>\n</li>\n<li>\n<p>Một số tính năng nên biết</p>\n<ul>\n<li><code class=\"language-text\">depends_on_past</code> sử dụng khi viết DAGs để chắc chắn mọi task instance trước đó đều success.</li>\n<li><code class=\"language-text\">LatestOnlyOperator</code> để skip một số bước phía sau nếu một số task bị trễ.</li>\n<li><code class=\"language-text\">BranchPythonOperator</code> cho phép rẽ nhánh workflow tùy vào điều kiện được định nghĩa.</li>\n</ul>\n</li>\n<li>Sử dụng <code class=\"language-text\">airflow test &lt;dag-id&gt; &lt;task-id&gt; ...</code> để test task instance trên local khi code.</li>\n<li><a href=\"https://blog.duyet.net/2019/08/airflow-docker-compose.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sử dụng Docker Compose</a> để thiết lập môi trường local cho dễ.</li>\n<li>Để test DAG với scheduler, hãy set <code class=\"language-text\">schedule_interval=@once</code>, chạy thử, để chạy lại thì chỉ cần clear DagRuns trên UI hoặc bằng lệnh <code class=\"language-text\">airflow clear</code></li>\n<li>Khi DAG đã được chạy, airflow chứa các task instance trong DB. Nếu bạn thay đổi <code class=\"language-text\">start_date</code> hoặc interval, scheduler có thể sẽ gặp lỗi. Nên đổi tên <code class=\"language-text\">dag_id</code> nếu muốn thay đổi <code class=\"language-text\">start_date</code> hoặc interval.</li>\n<li>\n<p>Sử dụng Bitshift thay vì <code class=\"language-text\">set_upstream()</code> and <code class=\"language-text\">set_downstream()</code> để code dễ nhìn hơn, ví dụ</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">op1 <span class=\"token operator\">>></span> op2\n<span class=\"token comment\"># tương đương: op1.set_downstream(op2)</span>\n\nop1 <span class=\"token operator\">>></span> op2 <span class=\"token operator\">>></span> op3 <span class=\"token operator\">&lt;&lt;</span> op4\n<span class=\"token comment\"># tương đương:</span>\n<span class=\"token comment\">#    op1.set_downstream(op2)</span>\n<span class=\"token comment\">#    op2.set_downstream(op3)</span>\n<span class=\"token comment\">#    op3.set_upstream(op4)</span>\n\nop1 <span class=\"token operator\">>></span> <span class=\"token punctuation\">[</span>op2<span class=\"token punctuation\">,</span> op3<span class=\"token punctuation\">]</span> <span class=\"token operator\">>></span> op4\n<span class=\"token comment\"># tương đương</span>\n<span class=\"token comment\">#    op1 >> op2</span>\n<span class=\"token comment\">#    op1 >> op3</span>\n<span class=\"token comment\">#    op2 >> op4</span>\n<span class=\"token comment\">#    op3 >> op4</span>\n<span class=\"token comment\"># hoặc tương đương</span>\n<span class=\"token comment\">#    op1.set_downstream([op2, op3])</span>\n<span class=\"token comment\">#    op2.set_downstream(op4)</span>\n<span class=\"token comment\">#    op3.set_downstream(op4)</span></code></pre></div>\n</li>\n<li>\n<p>Sử dụng <code class=\"language-text\">Variables</code> để lưu trữ params của DAGs (<code class=\"language-text\">Admin</code> -> <code class=\"language-text\">Variables</code>)</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> airflow<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Variable\nfoo <span class=\"token operator\">=</span> Variable<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span>\nbar <span class=\"token operator\">=</span> Variable<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">,</span> deserialize_json<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\nbaz <span class=\"token operator\">=</span> Variable<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"baz\"</span><span class=\"token punctuation\">,</span> default_var<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>hoặc sử dụng variable trong jinja template:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> var.value.<span class=\"token operator\">&lt;</span>variable_name<span class=\"token operator\">></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li><a href=\"https://blog.duyet.net/2019/08/slack-alerts-in-airflow.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sử dụng Slack để nhận thông báo lỗi</a></li>\n<li>\n<p>Sử dụng <strong>default arguments</strong> để tránh lặp lại các tham số</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">default_args <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'owner'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'airflow'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'depends_on_past'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'params'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'baz'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">with</span> DAG<span class=\"token punctuation\">(</span>dag_id<span class=\"token operator\">=</span><span class=\"token string\">'airflow'</span><span class=\"token punctuation\">,</span> default_args<span class=\"token operator\">=</span>default_args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    op1 <span class=\"token operator\">=</span> BigQueryOperator<span class=\"token punctuation\">(</span>task_id<span class=\"token operator\">=</span><span class=\"token string\">'query_1'</span><span class=\"token punctuation\">,</span> sql<span class=\"token operator\">=</span><span class=\"token string\">'SELECT 1'</span><span class=\"token punctuation\">)</span>\n    op2 <span class=\"token operator\">=</span> BigQueryOperator<span class=\"token punctuation\">(</span>task_id<span class=\"token operator\">=</span><span class=\"token string\">'query_2'</span><span class=\"token punctuation\">,</span> sql<span class=\"token operator\">=</span><span class=\"token string\">'SELECT 2'</span><span class=\"token punctuation\">)</span>\n    op1 <span class=\"token operator\">>></span> op2</code></pre></div>\n</li>\n<li>\n<p>Lưu password, token trong <code class=\"language-text\">Connections</code></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> airflow<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>base_hook <span class=\"token keyword\">import</span> BaseHook\naws_token <span class=\"token operator\">=</span> BaseHook<span class=\"token punctuation\">.</span>get_connection<span class=\"token punctuation\">(</span><span class=\"token string\">'aws_token'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>password</code></pre></div>\n</li>\n<li>\n<p>Có thể generate DAG một cách tự động, ví dụ</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">create_dag</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    dag <span class=\"token operator\">=</span> DAG<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'dag_job_</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">,</span> default_args<span class=\"token punctuation\">)</span>\n    op1 <span class=\"token operator\">=</span> BigQueryOperator<span class=\"token punctuation\">(</span>task_id<span class=\"token operator\">=</span><span class=\"token string\">'query_1'</span><span class=\"token punctuation\">,</span> sql<span class=\"token operator\">=</span><span class=\"token string\">'SELECT 1'</span><span class=\"token punctuation\">,</span> dag<span class=\"token operator\">=</span>dag<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">return</span> dag\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">globals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string-interpolation\"><span class=\"token string\">f'dag_job_</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> create_dag<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>","fields":{"slug":"/2019/08/airflow-note.html","tagSlugs":["/tag/airflow/","/tag/data/","/tag/data-engineer/"]},"frontmatter":{"date":"2019-08-27T23:00:00.000+07:00","description":"Một số ghi chép, tips & tricks của mình trong quá trình sử dụng Apache Airflow.","tags":["Airflow","Data","Data Engineer"],"title":"Airflow - một số ghi chép","fbCommentUrl":"none"}}},"pageContext":{"slug":"/2019/08/airflow-note.html"}},"staticQueryHashes":["251939775","2672868365","401334301"]}