{"componentChunkName":"component---src-templates-post-template-tsx","path":"/2015/09/git-19-tips-for-everyday-git-use.html","result":{"data":{"markdownRemark":{"id":"6f057804-eccf-5f72-ae7b-7a2788fe3646","html":"<p>I’ve been using git full time for the past 4 years, and I wanted to share the most practical tips that I’ve learned along the way. Hopefully, it will be useful to somebody out there.\nIf you are completely new to git, I suggest reading <a href=\"http://www.alexkras.com/getting-started-with-git/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Git Cheat Sheet</a> first. This article is aimed at somebody who has been using git for three months or more.</p>\n<p><strong>Table of Contexts:</strong></p>\n<ol>\n<li><a href=\"#git-log\">Parameters for better logging</a></li>\n<li><a href=\"#search-log\">Log actual changes in a file</a></li>\n<li><a href=\"#log-lines\">Only Log changes for some specific lines in file</a></li>\n<li><a href=\"#log-not-merged\">Log changes not yet merged to the parent branch</a></li>\n<li><a href=\"#extract-file\">Extract a file from another branch</a></li>\n<li><a href=\"#pull-rebase\">Some notes on rebasing</a></li>\n<li><a href=\"#no-fast-forward\">Remember the branch structure after a local merge</a></li>\n<li><a href=\"#ammend-commit\">Fix your previous commit, instead of making a new commit</a></li>\n<li><a href=\"#stages\">Three stages in git, and how to move between them</a></li>\n<li><a href=\"#soft-revert\">Revert a commit, softly</a></li>\n<li><a href=\"#folder-diff\">See diff-erence for the entire project (not just one file at a time) in a 3rd party diff tool</a></li>\n<li><a href=\"#ignore-white-space\">Ignore the white space</a></li>\n<li><a href=\"#selective-add\">Only “add” some changes from a file</a></li>\n<li><a href=\"#find-old-branches\">Discover and zap those old branches</a></li>\n<li><a href=\"#selective-stash\">Stash only some files</a></li>\n<li><a href=\"#good-commit-message\">Good commit messages</a></li>\n<li><a href=\"#auto-complete\">Git Auto-completion</a></li>\n<li><a href=\"#aliases\">Create aliases for your most frequently used commands</a></li>\n<li><a href=\"#git-bisect\">Quickly find a commit that broke your feature (EXTRA AWESOME)</a></li>\n</ol>\n<p><a href=\"https://www.blogger.com/null\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.blogger.com/null</a></p>\n<h2 id=\"1-parameters-for-better-logging\" style=\"position:relative;\"><a href=\"#1-parameters-for-better-logging\" aria-label=\"1 parameters for better logging permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Parameters for better logging</h2>\n<p><strong>Sample Command</strong><code class=\"language-text\">git log --oneline --graph</code>\nChances are, by now you’ve used git log. It supports a number of command line parameters, which are very powerful, especially when used in combination. Here are the ones that I use the most:</p>\n<ul>\n<li><code class=\"language-text\">--author=\"Alex Kras\"</code> – Only show commits made by a certain author</li>\n<li><code class=\"language-text\">--name-only</code> – Only show names of files that changed</li>\n<li><code class=\"language-text\">--oneline</code> – Show commit data compressed to one line</li>\n<li><code class=\"language-text\">--graph</code> – Show dependency tree for all commits</li>\n<li><code class=\"language-text\">--reverse</code> – Show commits in reverse order (Oldest commit first)</li>\n<li><code class=\"language-text\">--after</code> – Show all commits that happened after certain date</li>\n<li><code class=\"language-text\">--before</code> – Show all commits that happened before certain data</li>\n</ul>\n<p>For example, I once had a manager who required weekly reports submitted each Friday. So every Friday I would just run: <code class=\"language-text\">git log --author=\"Alex Kras\" --after=\"1 week ago\" --oneline</code>, edit it a little and send it in to the manager for review.\nGit has a lot more command line parameters that are handy. Just run <code class=\"language-text\">man git log</code> and see what it can do for you.\nIf everything else fails, git has a <code class=\"language-text\">--pretty</code> parameter that let’s you create a highly customizable output.\n<a href=\"http://www.alexkras.com/wp-content/uploads/git-log-oneline.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><figure class=\"md-figure\"><img src=\"http://www.alexkras.com/wp-content/uploads/git-log-oneline.png\"><figcaption>git-log-oneline</figcaption></figure></a>\n<a href=\"https://www.blogger.com/null\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.blogger.com/null</a></p>\n<h2 id=\"2-log-actual-changes-in-a-file\" style=\"position:relative;\"><a href=\"#2-log-actual-changes-in-a-file\" aria-label=\"2 log actual changes in a file permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Log actual changes in a file</h2>\n<p><strong>Sample Command</strong><code class=\"language-text\">git log -p filename</code>\n<code class=\"language-text\">git log -p</code> or <code class=\"language-text\">git log -p filename</code> lets you view not only the commit message, author, and date, but actual changes that took place in each commit.\nThen you can use the regular <code class=\"language-text\">less</code> search command of “slash” followed by your search term<code class=\"language-text\">/{{ \"{{\" }}your-search-here}}</code> to look for changes to a particular keyword over time. (Use lower case n to go to the next result, and upper case N to go to the previous result).\n<a href=\"http://www.alexkras.com/wp-content/uploads/git-log-search.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><figure class=\"md-figure\"><img src=\"http://www.alexkras.com/wp-content/uploads/git-log-search.png\"><figcaption>git-log-search</figcaption></figure></a>\n<a href=\"https://www.blogger.com/null\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.blogger.com/null</a></p>\n<h2 id=\"3-only-log-changes-for-some-specific-lines-in-a-file\" style=\"position:relative;\"><a href=\"#3-only-log-changes-for-some-specific-lines-in-a-file\" aria-label=\"3 only log changes for some specific lines in a file permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Only Log changes for some specific lines in a file</h2>\n<p><strong>Sample Command</strong><code class=\"language-text\">git log -L 1,1:some-file.txt</code>\nYou can use <code class=\"language-text\">git blame filename</code> to find the person responsible for every line of the file.\n<a href=\"http://www.alexkras.com/wp-content/uploads/git-blame.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><figure class=\"md-figure\"><img src=\"http://www.alexkras.com/wp-content/uploads/git-blame.png\"><figcaption>git-blame</figcaption></figure></a>\n<code class=\"language-text\">git blame</code> is a great tool, but sometimes it does not provide enough information.\nAn alternative is provided by <code class=\"language-text\">git log</code> with a <code class=\"language-text\">-L</code> flag. This flag allows you to specify particular lines in a file that you are interested in. Then Git would only log changes relevant to those lines. It’s kind of like <code class=\"language-text\">git log -p</code> with focus.\n<code class=\"language-text\">git log -L 1,1:some-file.txt</code>\n<a href=\"http://www.alexkras.com/wp-content/uploads/git-log-lines.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><figure class=\"md-figure\"><img src=\"http://www.alexkras.com/wp-content/uploads/git-log-lines.png\"><figcaption>git-log-lines</figcaption></figure></a>\n<a href=\"https://www.blogger.com/null\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.blogger.com/null</a></p>\n<h2 id=\"4-log-changes-not-yet-merged-to-the-parent-branch\" style=\"position:relative;\"><a href=\"#4-log-changes-not-yet-merged-to-the-parent-branch\" aria-label=\"4 log changes not yet merged to the parent branch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Log changes not yet merged to the parent branch</h2>\n<p><strong>Sample:</strong><code class=\"language-text\">git log --no-merges master..</code>\nIf you ever worked on a long-lived branches, with multiple people working on it, chances are you’ve experienced numerous merges of the parent branch(i.e. master) into your feature branch. This makes it hard to see the changes that took place on the master branch vs. the changes that have been committed on the feature branch and which have yet to be merged.\n<code class=\"language-text\">git log --no-merges master..</code> will solve the issue. Note the <code class=\"language-text\">--no-merges</code> flag indicate to only show changes that have not been merged yet to ANY branch, and the <strong>master..</strong> option, indicates to only show changes that have not been merged to master branch. (You must include the <strong>..</strong> after master).\nYou can also do <code class=\"language-text\">git show --no-merges master..</code> or <code class=\"language-text\">git log -p --no-merges master..</code> (output is identical) to see actual file changes that are have yet to be merged.\n<a href=\"https://www.blogger.com/null\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.blogger.com/null</a></p>\n<h2 id=\"5-extract-a-file-from-another-branch\" style=\"position:relative;\"><a href=\"#5-extract-a-file-from-another-branch\" aria-label=\"5 extract a file from another branch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Extract a file from another branch</h2>\n<p><strong>Sample:</strong><code class=\"language-text\">git show some-branch:some-file.js</code>\nSometimes it is nice to take a pick at an entire file on a different branch, without switching to this branch.\nYou can do so via <code class=\"language-text\">git show some-branch-name:some-file-name.js</code>, which would show the file in your terminal.\nYou can also redirect the output to a temporary file, so you can perhaps open it up in a side by side view in your editor of choice.\n<code class=\"language-text\">git show some-branch-name:some-file-name.js > deleteme.js</code>\nNote: If all you want to see is a diff between two files, you can simple run:<br>\n<code class=\"language-text\">git diff some-branch some-filename.js</code>\n<a href=\"https://www.blogger.com/null\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.blogger.com/null</a></p>\n<h2 id=\"6-some-notes-on-rebasing\" style=\"position:relative;\"><a href=\"#6-some-notes-on-rebasing\" aria-label=\"6 some notes on rebasing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. Some notes on rebasing</h2>\n<p><strong>Sample:</strong><code class=\"language-text\">git pull -—rebase</code>\nWe’ve talked about a lot of merge commits when working on a remote branch. Some of those commits can be avoided by using <code class=\"language-text\">git rebase</code>.\nGenerally I consider rebasing to be an advanced feature, and it’s probably best left for another post.\nEven git book has the following to say about rebasing.</p>\n<blockquote>\n<p>Ahh, but the bliss of rebasing isn’t without its drawbacks, which can be summed up in a single line:\nDo not rebase commits that exist outside your repository\nIf you follow that guideline, you’ll be fine. > If you don’t, people will hate you, and you’ll be scorned by friends and family.</p>\n</blockquote>\n<p><a href=\"https://git-scm.com/book/en/v2/Git-Branching-Rebasing#The-Perils-of-Rebasing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://git-scm.com/book/en/v2/Git-Branching-Rebasing#The-Perils-of-Rebasing</a>\nThat being said, rebasing is not something to be afraid of either, rather something that you should do with care.\nProbably the best way to rebase is using <strong>interactive rebasing</strong>, invoked via <code class=\"language-text\">git rebase -i {{ \"{{\" }}some commit hash}}</code>. It will open up an editor, with self explanatory instruction. Since rebasing is outside of the scope of this article, I’ll leave it at that.\n<a href=\"http://www.alexkras.com/wp-content/uploads/git-rebase-i.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><figure class=\"md-figure\"><img src=\"http://www.alexkras.com/wp-content/uploads/git-rebase-i.png\"><figcaption>git-rebase-i</figcaption></figure></a></p>\n<h3 id=\"one-particular-rebase-that-is-very-helpful-is-git-pull---rebase\" style=\"position:relative;\"><a href=\"#one-particular-rebase-that-is-very-helpful-is-git-pull---rebase\" aria-label=\"one particular rebase that is very helpful is git pull   rebase permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>One particular rebase that is very helpful is <code class=\"language-text\">git pull --rebase</code>.</h3>\n<p>For example, imagine you are working on a local version of a master branch, and you made one small commit. At the same time, somebody else checked in a week worth of work onto the master branch. When you try to push your change, git tells you to do a <code class=\"language-text\">git pull</code> first, to resolve the conflict. Being a good citizen that you are, you do a <code class=\"language-text\">git pull</code> to end up with the following commit message auto generated by git.</p>\n<blockquote>\n<p>Merge remote-tracking branch ‘origin/master’</p>\n</blockquote>\n<p>While this is not a big deal and is completely safe, it does clutter log history a bit.\nIn this case, a valid alternative is to do a <code class=\"language-text\">git pull --rebase</code> instead.\nThis will force git to first pull the changes, and then re-apply(rebase) your un-pushed commits on top of the latest version of the remote branch, as if they just took place. This will remove the need for merge and the ugly merge message.\n<a href=\"https://www.blogger.com/null\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.blogger.com/null</a></p>\n<h2 id=\"7-remember-the-branch-structure-after-a-local-merge\" style=\"position:relative;\"><a href=\"#7-remember-the-branch-structure-after-a-local-merge\" aria-label=\"7 remember the branch structure after a local merge permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. Remember the branch structure after a local merge</h2>\n<p><strong>Sample:</strong><code class=\"language-text\">git merge --no-ff</code>\nI like to create a new branch for every new bug or feature. Among other benefits, it helps me to get a great clarity on how a series of commits may relate to a particular task. If you ever merged a pull request on github or a similar tool, you will in fact be able to nicely see the merged branch history in <code class=\"language-text\">git log --oneline --graph</code> view.\nIf you ever try to merge a local branch, into another local branch, you may notice git has flatten out the branch, making it show up as a straight line in git history.\nIf you want to force git to keep branches history, similarly to what you would see during a pull request, you can add a <code class=\"language-text\">--no-ff</code> flag, resulting in a nice commit history tree.\n<code class=\"language-text\">git merge --no-ff some-branch-name</code>\n<a href=\"http://www.alexkras.com/wp-content/uploads/git-merge-no-ff.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><figure class=\"md-figure\"><img src=\"http://www.alexkras.com/wp-content/uploads/git-merge-no-ff.png\"><figcaption>git-merge-no-ff</figcaption></figure></a>\n<a href=\"https://www.blogger.com/null\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.blogger.com/null</a></p>\n<h2 id=\"8-fix-your-previous-commit-instead-of-making-a-new-commit\" style=\"position:relative;\"><a href=\"#8-fix-your-previous-commit-instead-of-making-a-new-commit\" aria-label=\"8 fix your previous commit instead of making a new commit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8. Fix your previous commit, instead of making a new commit</h2>\n<p><strong>Sample</strong><code class=\"language-text\">git commit --amend</code>\nThis one is pretty straightforward.\nLet say you made a commit and then realized you made a typo. You could make a new commit with a “descriptive” message <strong>typo</strong>. But there is a better way.\n<strong>If you haven’t pushed to the remote branch yet</strong>, you can simply do the following:</p>\n<ol>\n<li>Fix your typo</li>\n<li>Stage the newly fixed file via <code class=\"language-text\">git add some-fixed-file.js</code></li>\n<li>Run <code class=\"language-text\">git commit --amend</code> which would add the most recent changes to your latest commit. It will also give you a chance to edit the commit message.</li>\n<li>Push the clean branch to remote, when ready</li>\n</ol>\n<p><a href=\"http://www.alexkras.com/wp-content/uploads/git-commit-amend.gif\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><figure class=\"md-figure\"><img src=\"http://www.alexkras.com/wp-content/uploads/git-commit-amend.gif\"><figcaption>git-commit-amend</figcaption></figure></a>\nIf you are working on your own branch, you can fix commits even after you have pushed, you would just have to do a <code class=\"language-text\">git push -f</code> (-f stands for force), which would over-ride the history. But you <strong>WOULD NOT want to do this</strong> on a branch that is <strong>being used by other people</strong> (as discussed in rebase section above). At that point, a “typo” commit, might be your best bet.\n<a href=\"https://www.blogger.com/null\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.blogger.com/null</a></p>\n<h2 id=\"9-three-stages-in-git-and-how-to-move-between-them\" style=\"position:relative;\"><a href=\"#9-three-stages-in-git-and-how-to-move-between-them\" aria-label=\"9 three stages in git and how to move between them permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9. Three stages in git, and how to move between them</h2>\n<p><strong>Sample</strong><code class=\"language-text\">git reset --hard HEAD</code> and <code class=\"language-text\">git status -s</code>\nAs you may already know by now, a file in git can be in 3 stages:</p>\n<ol>\n<li>Not staged for commit</li>\n<li>Staged for commit</li>\n<li>Committed</li>\n</ol>\n<p>You can see a long description of the files and state they are in by running <code class=\"language-text\">git status</code>. You move a file from <em>“not staged for commit”</em> stage to <em>“staged for commit”</em> stage, by running <code class=\"language-text\">git add filename.js</code> or <code class=\"language-text\">git add .</code> to add all files at once.\nAnother view that makes it much easier to visualize the stages is invoked via <code class=\"language-text\">git status -s</code> where <code class=\"language-text\">-s</code> stand for short (I think), and would result in an output that looks like that:\n<a href=\"http://www.alexkras.com/wp-content/uploads/git-stages.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><figure class=\"md-figure\"><img src=\"http://www.alexkras.com/wp-content/uploads/git-stages.png\"><figcaption>git-stages</figcaption></figure></a>\nObviously, <code class=\"language-text\">git status</code> will not show files that have already been committed, you can use <code class=\"language-text\">git log</code> to see those instead <figure class=\"md-figure\"><img src=\"http://www.alexkras.com/wp-includes/images/smilies/simple-smile.png\"><figcaption>:)</figcaption></figure>\nThere are a couple of options available to you to move the files to a different stage.</p>\n<h3 id=\"resetting-the-files\" style=\"position:relative;\"><a href=\"#resetting-the-files\" aria-label=\"resetting the files permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Resetting the files</h3>\n<p>There are 3 types of reset available in git. A reset allows you to return to a particular version in git history.</p>\n<ol>\n<li><code class=\"language-text\">git reset --hard {{ \"{{\" }}some-commit-hash}}</code> – Return to a particular point in history. <strong>All changes made after this commit are discarded</strong>.</li>\n<li><code class=\"language-text\">git reset {{ \"{{\" }}some-commit-hash}}</code> – Return to a particular point in history. <strong>All changes made after this commit are moved “not yet staged for commit” stage</strong>. Meaning you would have to run <code class=\"language-text\">git add .</code> and <code class=\"language-text\">git commit</code> to add them back in.</li>\n<li><code class=\"language-text\">git reset --soft {{ \"{{\" }}some-commit-hash}}</code> – Return to a particular point in history. <strong>All changes made after this commit are moved to “staged for commit” stage</strong>. Meaning you only need to run <code class=\"language-text\">git commit</code> to add them back in.</li>\n</ol>\n<p>This may appear as useless information at first, but it is actually very handy when you are trying to move through different version of the file.\nCommon use cases that I find myself using the reset are bellow:</p>\n<ol>\n<li>I want to forget all the changes I’ve made, clean start – <code class=\"language-text\">git reset --hard HEAD</code> (Most common)</li>\n<li>I want to edit, re-stage and re-commit files in some different order – <code class=\"language-text\">git reset {{ \"{{\" }}some-start-point-hash}}</code></li>\n<li>I just want to re commit past 3 commits, as one big commit – <code class=\"language-text\">git reset --soft {{ \"{{\" }}some-start-point-hash}}</code></li>\n</ol>\n<h3 id=\"check-out-some-files\" style=\"position:relative;\"><a href=\"#check-out-some-files\" aria-label=\"check out some files permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Check out some files</h3>\n<p>If you simply want to forget some local changes for some files, but at the same time want to keep changes made in other files, it is much easier to check out committed versions of the files that you want to forget, via:<br>\n<code class=\"language-text\">git checkout forget-my-changes.js</code>\nIt’s like running <code class=\"language-text\">git reset --hard</code> but only on some of the files.\nAs mentioned before you can also check out a different version of a file from another branch or commit.\n<code class=\"language-text\">git checkout some-branch-name file-name.js</code> and<br>\n<code class=\"language-text\">git checkout {{ \"{{\" }}some-commit-hash}} file-name.js</code>\nYou’ll notice that the checked out files will be in a “staged for commit” stage. To move them back to “un-staged for commit” stage, you would have to do a <code class=\"language-text\">git reset HEAD file-name.js</code>. You can run <code class=\"language-text\">git checkout file-name.js</code> again, to return the file to it’s original state.\nNote, that running <code class=\"language-text\">git reset --hard HEAD file-name.js</code> does not work. In general, moving through various stages in git is a bit confusing and the pattern is not always clear, which I hoped is to remedied a bit with this section.\n<a href=\"https://www.blogger.com/null\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.blogger.com/null</a></p>\n<h2 id=\"10-revert-a-commit-softly\" style=\"position:relative;\"><a href=\"#10-revert-a-commit-softly\" aria-label=\"10 revert a commit softly permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>10. Revert a commit, softly</h2>\n<p><strong>Sample</strong><code class=\"language-text\">git revert -n</code>\nThis one is handy if you want to undo a previous commit or two, look at the changes, and see which ones might have caused a problem.\nRegular <code class=\"language-text\">git revert</code> will automatically re-commit reverted files, prompting you to write a new commit message. The <code class=\"language-text\">-n</code> flag tells git to take it easy on committing for now, since all we want to do is look.\n<a href=\"https://www.blogger.com/null\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.blogger.com/null</a></p>\n<h2 id=\"11-see-diff-erence-for-the-entire-project-not-just-one-file-at-a-time-in-a-3rd-party-diff-tool\" style=\"position:relative;\"><a href=\"#11-see-diff-erence-for-the-entire-project-not-just-one-file-at-a-time-in-a-3rd-party-diff-tool\" aria-label=\"11 see diff erence for the entire project not just one file at a time in a 3rd party diff tool permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>11. See diff-erence for the entire project (not just one file at a time) in a 3rd party diff tool</h2>\n<p><strong>Sample</strong><code class=\"language-text\">git difftool -d</code>\nMy favorite diff-ing program is <a href=\"http://www.alexkras.com/how-to-run-meld-on-mac-os-x-yosemite-without-homebrew-macports-or-think/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Meld</a>. I fell in love with it during my Linux times, and I carry it with me.\nI am not trying to sell you on Meld, though. Chances are you have a diff-ing tool of choice already, and git can work with it too, both as a merge and as a diff tool. Simply run the following commands, making sure to replace meld with your favorite diff tools of choice:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git config --global diff.tool meld\ngit config --global merge.tool meld</code></pre></div>\n<p>After that all you have to do is run <code class=\"language-text\">git difftool some-file.js</code> to see the changes in that program instead of the console.\n<strong>But some of the diff-ing tools (such as meld) support full directory diffs.</strong>\nIf you invoke <code class=\"language-text\">git difftool</code> with a <code class=\"language-text\">-d</code> flag, it will try to diff the entire folder. Which could be really handy at times.\n<code class=\"language-text\">git difftool -d</code>\n<a href=\"http://www.alexkras.com/wp-content/uploads/git-difftool-d.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><figure class=\"md-figure\"><img src=\"http://www.alexkras.com/wp-content/uploads/git-difftool-d.png\"><figcaption>git-difftool-d</figcaption></figure></a>\n<a href=\"https://www.blogger.com/null\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.blogger.com/null</a></p>\n<h2 id=\"12-ignore-the-white-space\" style=\"position:relative;\"><a href=\"#12-ignore-the-white-space\" aria-label=\"12 ignore the white space permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>12. Ignore the white space</h2>\n<p><strong>Sample</strong><code class=\"language-text\">git diff -w</code> or <code class=\"language-text\">git blame -w</code>\nHave you ever re-indented or re-formatted a file, only to realize that now <code class=\"language-text\">git blame</code> shows that you are responsible for everything in that file?\nTurns out, git is smart enough to know the difference. You can invoke a lot of the commands (i.e. <code class=\"language-text\">git diff</code>, <code class=\"language-text\">git blame</code>) with a <code class=\"language-text\">-w</code> flag, and git will ignore the white space changes.\n<a href=\"https://www.blogger.com/null\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.blogger.com/null</a></p>\n<h2 id=\"13-only-add-some-changes-from-a-file\" style=\"position:relative;\"><a href=\"#13-only-add-some-changes-from-a-file\" aria-label=\"13 only add some changes from a file permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>13. Only “add” some changes from a file</h2>\n<p><strong>Sample</strong><code class=\"language-text\">git add -p</code>\nSomebody at git must really like the <code class=\"language-text\">-p</code> flag, because it always comes with some handy functionality.\nIn case of <code class=\"language-text\">git add</code>, it allows you to interactive select exactly what you want to be committed. That way you can logically organize your commits in an easy to read manner.\n<a href=\"http://www.alexkras.com/wp-content/uploads/git-add-p.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><figure class=\"md-figure\"><img src=\"http://www.alexkras.com/wp-content/uploads/git-add-p.png\"><figcaption>git-add-p</figcaption></figure></a>\n<a href=\"https://www.blogger.com/null\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.blogger.com/null</a></p>\n<h2 id=\"14-discover-and-zap-those-old-branches\" style=\"position:relative;\"><a href=\"#14-discover-and-zap-those-old-branches\" aria-label=\"14 discover and zap those old branches permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>14. Discover and zap those old branches</h2>\n<p><strong>Sample</strong><code class=\"language-text\">git branch -a</code>\nIt is common for a large number of remote branches to just hang around, some even after they have been merged into the master branch. If you are a neat freak (at least when it comes to code) like me, chances are they will irritate you a little.\nYou can see all of the remote branches by running git branch with the <code class=\"language-text\">-a</code> flag (show all branches) and the <code class=\"language-text\">--merged</code> flag would only show branches that are fully merged into the master branch.\nYou might want to run <code class=\"language-text\">git fetch -p</code> (fetch and purge old data) first, to make sure your data is up to date.\n<a href=\"http://www.alexkras.com/wp-content/uploads/git-branch-a-merged.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><figure class=\"md-figure\"><img src=\"http://www.alexkras.com/wp-content/uploads/git-branch-a-merged.png\"><figcaption>git-branch-a-merged</figcaption></figure></a>\nIf you want to get really fancy, you can get a list of all the remote branches, and the list of last commits made on those branches by running:<br>\n<code class=\"language-text\">git for-each-ref --sort=committerdate --format='%(refname:short) *  %(authorname) * %(committerdate:relative)' refs/remotes/ | column -t -s '*'</code>.\n<a href=\"http://www.alexkras.com/wp-content/uploads/fancy-branch-view.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><figure class=\"md-figure\"><img src=\"http://www.alexkras.com/wp-content/uploads/fancy-branch-view.png\"><figcaption>fancy-branch-view</figcaption></figure></a>\nUnfortunately, there is no easy way (that I know of) to only show merged branches. So you might have to just compare the two outputs or write a script to do it for you.\n<a href=\"https://www.blogger.com/null\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.blogger.com/null</a></p>\n<h2 id=\"15-stash-only-some-files\" style=\"position:relative;\"><a href=\"#15-stash-only-some-files\" aria-label=\"15 stash only some files permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>15. Stash only some files</h2>\n<p><strong>Sample</strong><code class=\"language-text\">git stash —keep-index</code> or <code class=\"language-text\">git stash -p</code>\nIf you don’t yet know what <code class=\"language-text\">git stash</code> does, it simply puts all your unsaved changes on a “git stack” of sorts. Then at a later time you can do <code class=\"language-text\">git stash pop</code> and your changes will be re-applied. You can also do <code class=\"language-text\">git stash list</code> to see all your stashed changes. Take a look at <code class=\"language-text\">man git stash</code> for more options.\nOne limitation of regular <code class=\"language-text\">git stash</code> is that it will stash all of the files at once. And sometimes it is handy to only stash some of the file, and keep the rest in your working tree.\nRemember the magic <code class=\"language-text\">-p</code>command? Well it’s really handy with <code class=\"language-text\">git stash</code> as well. As you may have probably guessed by now, it will ask you to see which chunks of changes you want to be stashed.\nMake sure to hit <code class=\"language-text\">?</code> while you at it to see all available options.\n<a href=\"http://www.alexkras.com/wp-content/uploads/git-stash-p.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><figure class=\"md-figure\"><img src=\"http://www.alexkras.com/wp-content/uploads/git-stash-p.png\"><figcaption>git-stash-p</figcaption></figure></a>\nAnother handy trick, for stashing only some of the files, is to:</p>\n<ol>\n<li><code class=\"language-text\">add</code> the files that you DO NOT want to get stashed (i.e. <code class=\"language-text\">git add file1.js, file2.js</code>)</li>\n<li>Call <code class=\"language-text\">git stash --keep-index</code>. It will only stash files that have not been added.</li>\n<li>Call <code class=\"language-text\">git reset</code> to un-stage the added files and continue your work.</li>\n</ol>\n<p><a href=\"https://www.blogger.com/null\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.blogger.com/null</a></p>\n<h2 id=\"16-good-commit-messages\" style=\"position:relative;\"><a href=\"#16-good-commit-messages\" aria-label=\"16 good commit messages permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>16. Good commit messages</h2>\n<p>A little while ago I came across a great article on how to write a good commit message. Check it out here: <a href=\"http://chris.beams.io/posts/git-commit/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How to Write a Git Commit Message</a>\nOne rule that really stood out for me is, <strong>“every good commit should be able to complete the following sentence”</strong>\n<strong>When applied, this commit will:</strong> {{ ”{{” }} YOUR COMMIT MESSAGE}}\nFor example:<br>\n– <em>When applied this commit will</em><strong>Update README file</strong>\n– <em>When applied this commit will</em><strong>Add validation for GET /user/:id API call</strong>\n– <em>When applied this commit will</em><strong>Revert commit 12345</strong>\n<a href=\"https://www.blogger.com/null\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.blogger.com/null</a></p>\n<h2 id=\"17-git-auto-completion\" style=\"position:relative;\"><a href=\"#17-git-auto-completion\" aria-label=\"17 git auto completion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>17. Git Auto-completion</h2>\n<p>Git packages for some operating systems (i.e. Ubuntu) come with git auto completion enabled by default. If your operating system did not come with one(Mac doesn’t), you can easily enable it by following these guidelines:\n<a href=\"https://git-scm.com/book/en/v1/Git-Basics-Tips-and-Tricks#Auto-Completion\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://git-scm.com/book/en/v1/Git-Basics-Tips-and-Tricks#Auto-Completion</a>\n<a href=\"https://www.blogger.com/null\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.blogger.com/null</a></p>\n<h2 id=\"18-create-aliases-for-your-most-frequently-used-commands\" style=\"position:relative;\"><a href=\"#18-create-aliases-for-your-most-frequently-used-commands\" aria-label=\"18 create aliases for your most frequently used commands permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>18. Create aliases for your most frequently used commands</h2>\n<p><strong>TLDR; Use git or bash aliases for most commonly used long git commands</strong>\nBest way to use Git is via command line, and the best way to learn the command line is by doing everything the hard way first (typing everything out).\nAfter a while, however, it might be a good idea to track down your most used commands, and create an easier aliases for them.\nGit comes with built in aliases, for example you can run the following command once:\n<code class=\"language-text\">git config --global alias.l \"log --oneline --graph\"</code>\nWhich would create a new git alias named <code class=\"language-text\">l</code>, that would allow you to run:<br>\n<code class=\"language-text\">git l</code> instead of <code class=\"language-text\">git log --oneline --graph</code>.\n<em>Note that you can also append other parameters after the alias (i.e. <code class=\"language-text\">git l --author=\"Alex\"</code>).</em>\nAnother alternative, is good old Bash alias.\nFor example, I have the following entry in my .bashrc file.\n<code class=\"language-text\">alias gil=\"git log –online –graph\"</code>, allowing me to use <code class=\"language-text\">gil</code> instead of the long command,which is even 2 character shorter than having to type <code class=\"language-text\">git l</code> :).\n<a href=\"https://www.blogger.com/null\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.blogger.com/null</a></p>\n<h2 id=\"19-quickly-find-a-commit-that-broke-your-feature-extra-awesome\" style=\"position:relative;\"><a href=\"#19-quickly-find-a-commit-that-broke-your-feature-extra-awesome\" aria-label=\"19 quickly find a commit that broke your feature extra awesome permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>19. Quickly find a commit that broke your feature (EXTRA AWESOME)</h2>\n<p><strong>Sample:</strong><code class=\"language-text\">git bisect</code>\n<code class=\"language-text\">git bisect</code> uses divide and conquer algorithm to find a broken commit among a large number of commits.\nImagine yourself coming back to work after a week long vacation. You pull the latest version of the project only to find out that a feature that you worked on right before you left is now broken.\nYou check the last commit that you’ve made before you left, and the feature appear to work there. However, there has been over a hundred of other commits made after you left for your trip, and you have no idea which of those commits broke your feature.\n<a href=\"http://www.alexkras.com/wp-content/uploads/pulling-out-hair.jpg\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><figure class=\"md-figure\"><img src=\"http://www.alexkras.com/wp-content/uploads/pulling-out-hair.jpg\"><figcaption>pulling-out-hair</figcaption></figure></a>\nAt this point you would probably try to find the bug that broke your feature and use <code class=\"language-text\">git blame</code> on the breaking change to find the person to go yell at.\n<strong>If the bug is hard to find</strong>, however, you could try to navigate your way through the commit history, in attempt to pin point where the things went bad.\nThe second approach is exactly where <code class=\"language-text\">git bisect</code> is so handy. It will allow you to find the breaking change in the fastest time possible.</p>\n<h3 id=\"so-what-does-git-bisect-do\" style=\"position:relative;\"><a href=\"#so-what-does-git-bisect-do\" aria-label=\"so what does git bisect do permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>So what does <code class=\"language-text\">git bisect</code> do?</h3>\n<p>After you specify any known bad commit and any known good commit, <code class=\"language-text\">git bisect</code> will split the in-between commits in half, and checkout a new (nameless) branch in the middle commit to let you check if your future is broken at that point in time.\nLet say the middle commit still works. You would then let git know that via <code class=\"language-text\">git bisect good</code> command. Then you only have half of the commits left to test.\nGit would then split the remaining commits in half and into a new branch(again), letting you to test the feature again.\n<code class=\"language-text\">git bisect</code> will continue to narrow down your commits in a similar manner, until the first bad commit is found.\nSince you divide the number of commits by half on every iteration, you are able to find your bad commits in log(n) time (which is simply a <a href=\"https://en.wikipedia.org/wiki/Big_O_notation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">“big O”</a> speak for very fast).</p>\n<h3 id=\"the-actual-commands-you-need-to-run-to-execute-the-full-git-bisect-flow-are\" style=\"position:relative;\"><a href=\"#the-actual-commands-you-need-to-run-to-execute-the-full-git-bisect-flow-are\" aria-label=\"the actual commands you need to run to execute the full git bisect flow are permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The actual commands you need to run to execute the full <code class=\"language-text\">git bisect</code> flow are:</h3>\n<ol>\n<li><code class=\"language-text\">git bisect start</code> – let git know to start bisecting.</li>\n<li><code class=\"language-text\">git bisect good {{ \"{{\" }}some-commit-hash}}</code> – let git know about a known good commit (i.e. last commit that you made before the vacation).</li>\n<li><code class=\"language-text\">git bisect bad {{ \"{{\" }}some-commit-hash}}</code> – let git know about a known bad commit (i.e. the HEAD of the master branch). <code class=\"language-text\">git bisect bad HEAD</code> (HEAD just means the last commit).</li>\n<li>At this point git would check out a middle commit, and let you know to run your tests.</li>\n<li><code class=\"language-text\">git bisect bad</code> – let git know that the feature does not work in currently checked out commit.</li>\n<li><code class=\"language-text\">git bisect good</code> – let git know that the feature does work in currently checked out commit.</li>\n<li>When the first bad commit is found, git would let you know. At this point <code class=\"language-text\">git bisect</code> is done.</li>\n<li><code class=\"language-text\">git bisect reset</code> – returns you to the initial starting point of <code class=\"language-text\">git bisect</code> process, (i.e. the HEAD of the master branch).</li>\n<li><code class=\"language-text\">git bisect log</code> – log the last <code class=\"language-text\">git bisect</code> that completed successfully.</li>\n</ol>\n<p>You can also automate the process by providing <code class=\"language-text\">git bisect</code> with a script. You can read more here: <a href=\"http://git-scm.com/docs/git-bisect#_bisect_run\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://git-scm.com/docs/git-bisect#_bisect_run</a>\n<a href=\"http://www.alexkras.com/wp-content/uploads/git-bisect.gif\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><figure class=\"md-figure\"><img src=\"http://www.alexkras.com/wp-content/uploads/git-bisect.gif\"><figcaption>git-bisect</figcaption></figure></a></p>\n<p><a href=\"https://www.blogger.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.blogger.com/</a><a href=\"https://www.blogger.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.blogger.com/</a><a href=\"https://www.blogger.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.blogger.com/</a><a href=\"https://www.blogger.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.blogger.com/</a><a href=\"https://www.addtoany.com/share_save#url=http%3A%2F%2Fwww.alexkras.com%2F19-git-tips-for-everyday-use%2F&#x26;title=19%20Tips%20For%20Everyday%20Git%20Use&#x26;description=\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.addtoany.com/share_save#url=http%3A%2F%2Fwww.alexkras.com%2F19-git-tips-for-everyday-use%2F&#x26;title=19%20Tips%20For%20Everyday%20Git%20Use&#x26;description=</a></p>","fields":{"slug":"/2015/09/git-19-tips-for-everyday-git-use.html","tagSlugs":["/tag/git/","/tag/thủ-thuật-git/"]},"frontmatter":{"date":"2015-09-16T13:47:00.000+07:00","description":"I’ve been using git full time for the past 4 years, and I wanted to share the most practical tips that I’ve learned along the way. Hopefully, it will be useful to somebody out there","tags":["Git","Thủ thuật Git"],"title":"Git - 19 Tips For Everyday Git Use","fbCommentUrl":"none"}}},"pageContext":{"slug":"/2015/09/git-19-tips-for-everyday-git-use.html"}},"staticQueryHashes":["251939775","2672868365","401334301"]}