{"componentChunkName":"component---src-templates-post-template-js","path":"/2015/08/javascript-style-guide.html","result":{"data":{"markdownRemark":{"id":"b88af4c8-dc6b-529f-bbe1-beb659afd9f2","html":"<p>A mostly reasonable approach to JavaScript.\nSee full: <a href=\"https://github.com/duyet/javascript\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/duyet/javascript</a></p>\n<h2 id=\"table-of-contents\" style=\"position:relative;\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h2>\n<ol>\n<li><a href=\"#types\">Types</a></li>\n<li><a href=\"#objects\">Objects</a></li>\n<li><a href=\"#arrays\">Arrays</a></li>\n<li><a href=\"#strings\">Strings</a></li>\n<li><a href=\"#functions\">Functions</a></li>\n<li><a href=\"#properties\">Properties</a></li>\n<li><a href=\"#variables\">Variables</a></li>\n<li><a href=\"#hoisting\">Hoisting</a></li>\n<li><a href=\"#comparison-operators--equality\">Comparison Operators &#x26; Equality</a></li>\n<li><a href=\"#blocks\">Blocks</a></li>\n<li><a href=\"#comments\">Comments</a></li>\n<li><a href=\"#whitespace\">Whitespace</a></li>\n<li><a href=\"#commas\">Commas</a></li>\n<li><a href=\"#semicolons\">Semicolons</a></li>\n<li><a href=\"#type-casting--coercion\">Type Casting &#x26; Coercion</a></li>\n<li><a href=\"#naming-conventions\">Naming Conventions</a></li>\n<li><a href=\"#accessors\">Accessors</a></li>\n<li><a href=\"#constructors\">Constructors</a></li>\n<li><a href=\"#events\">Events</a></li>\n<li><a href=\"#modules\">Modules</a></li>\n<li><a href=\"#jquery\">jQuery</a></li>\n<li><a href=\"#ecmascript-5-compatibility\">ECMAScript 5 Compatibility</a></li>\n<li><a href=\"#testing\">Testing</a></li>\n<li><a href=\"#performance\">Performance</a></li>\n<li><a href=\"#resources\">Resources</a></li>\n<li><a href=\"#in-the-wild\">In the Wild</a></li>\n<li><a href=\"#translation\">Translation</a></li>\n<li><a href=\"#the-javascript-style-guide-guide\">The JavaScript Style Guide Guide</a></li>\n<li><a href=\"#chat-with-us-about-javascript\">Chat With Us About Javascript</a></li>\n<li><a href=\"#contributors\">Contributors</a></li>\n<li><a href=\"#license\">License</a></li>\n</ol>\n<h2 id=\"types\" style=\"position:relative;\"><a href=\"#types\" aria-label=\"types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Types</h2>\n<ul>\n<li>Primitives: When you access a primitive type you work directly on its value.</li>\n<li><code class=\"language-text\">string</code></li>\n<li><code class=\"language-text\">number</code></li>\n<li><code class=\"language-text\">boolean</code></li>\n<li><code class=\"language-text\">null</code></li>\n<li><code class=\"language-text\">undefined</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var foo =1;\nvar bar = foo;\n\nbar =9;\n\nconsole.log(foo, bar); // =&gt; 1, 9</code></pre></div>\n<ul>\n<li>Complex: When you access a complex type you work on a reference to its value.</li>\n<li><code class=\"language-text\">object</code></li>\n<li><code class=\"language-text\">array</code></li>\n<li><code class=\"language-text\">function</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var foo = [1, 2];\nvar bar = foo;\n\nbar[0] =9;\n\nconsole.log(foo[0], bar[0]); // =&gt; 9, 9</code></pre></div>\n<p><a href=\"#table-of-contents\">⬆ back to top</a></p>\n<h2 id=\"objects\" style=\"position:relative;\"><a href=\"#objects\" aria-label=\"objects permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Objects</h2>\n<ul>\n<li>Use the literal syntax for object creation.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\nvar item =newObject();\n\n// good\nvar item = {};</code></pre></div>\n<ul>\n<li>Don’t use <a href=\"http://es5.github.io/#x7.6.1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">reserved words</a> as keys. It won’t work in IE8. <a href=\"https://github.com/airbnb/javascript/issues/61\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">More info</a>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\nvar superman = {\ndefault: { clark:&#39;kent&#39; },\n  private:true\n};\n\n// good\nvar superman = {\n  defaults: { clark:&#39;kent&#39; },\n  hidden:true\n};</code></pre></div>\n<ul>\n<li>Use readable synonyms in place of reserved words.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\nvar superman = {\n  class:&#39;alien&#39;\n};\n\n// bad\nvar superman = {\n  klass:&#39;alien&#39;\n};\n\n// good\nvar superman = {\n  type:&#39;alien&#39;\n};</code></pre></div>\n<p><a href=\"#table-of-contents\">⬆ back to top</a></p>\n<h2 id=\"arrays\" style=\"position:relative;\"><a href=\"#arrays\" aria-label=\"arrays permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Arrays</h2>\n<ul>\n<li>Use the literal syntax for array creation.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\nvar items =newArray();\n\n// good\nvar items = [];</code></pre></div>\n<ul>\n<li>Use Array#push instead of direct assignment to add items to an array.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var someStack = [];\n\n// bad\nsomeStack[someStack.length] =&#39;abracadabra&#39;;\n\n// good\nsomeStack.push(&#39;abracadabra&#39;);</code></pre></div>\n<ul>\n<li>When you need to copy an array use Array#slice. <a href=\"http://jsperf.com/converting-arguments-to-an-array/7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">jsPerf</a></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var len = items.length;\nvar itemsCopy = [];\nvar i;\n\n// bad\nfor (i =0; i &lt; len; i++) {\n  itemsCopy[i] = items[i];\n}\n\n// good\nitemsCopy = items.slice();</code></pre></div>\n<ul>\n<li>To convert an array-like object to an array, use Array#slice.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">functiontrigger() {\nvar args =Array.prototype.slice.call(arguments);\n  ...\n}</code></pre></div>\n<p><a href=\"#table-of-contents\">⬆ back to top</a></p>\n<h2 id=\"strings\" style=\"position:relative;\"><a href=\"#strings\" aria-label=\"strings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Strings</h2>\n<ul>\n<li>Use single quotes <code class=\"language-text\">&#39;&#39;</code> for strings.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\nvar name =&quot;Bob Parr&quot;;\n\n// good\nvar name =&#39;Bob Parr&#39;;\n\n// bad\nvar fullName =&quot;Bob &quot;+this.lastName;\n\n// good\nvar fullName =&#39;Bob &#39;+this.lastName;</code></pre></div>\n<ul>\n<li>Strings longer than 80 characters should be written across multiple lines using string concatenation.</li>\n<li>Note: If overused, long strings with concatenation could impact performance. <a href=\"http://jsperf.com/ya-string-concat\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">jsPerf</a> &#x26; <a href=\"https://github.com/airbnb/javascript/issues/40\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Discussion</a>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\nvar errorMessage =&#39;This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.&#39;;\n\n// bad\nvar errorMessage =&#39;This is a super long error that was thrown because \\\nof Batman. When you stop to think about how Batman had anything to do \\\nwith this, you would get nowhere \\\nfast.&#39;;\n\n// good\nvar errorMessage =&#39;This is a super long error that was thrown because &#39;+\n&#39;of Batman. When you stop to think about how Batman had anything to do &#39;+\n&#39;with this, you would get nowhere fast.&#39;;</code></pre></div>\n<ul>\n<li>When programmatically building up a string, use Array#join instead of string concatenation. Mostly for IE: <a href=\"http://jsperf.com/string-vs-array-concat/2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">jsPerf</a>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var items;\nvar messages;\nvar length;\nvar i;\n\nmessages = [{\n  state:&#39;success&#39;,\n  message:&#39;This one worked.&#39;\n}, {\n  state:&#39;success&#39;,\n  message:&#39;This one worked as well.&#39;\n}, {\n  state:&#39;error&#39;,\n  message:&#39;This one did not work.&#39;\n}];\n\nlength = messages.length;\n\n// bad\nfunctioninbox(messages) {\n  items =&#39;&lt;ul&gt;&#39;;\n\nfor (i =0; i &lt; length; i++) {\n    items +=&#39;&lt;li&gt;&#39;+ messages[i].message +&#39;&lt;/li&gt;&#39;;\n  }\n\nreturn items +&#39;&lt;/ul&gt;&#39;;\n}\n\n// good\nfunctioninbox(messages) {\n  items = [];\n\nfor (i =0; i &lt; length; i++) {\n    items[i] =&#39;&lt;li&gt;&#39;+ messages[i].message +&#39;&lt;/li&gt;&#39;;\n  }\n\nreturn&#39;&lt;ul&gt;&#39;+ items.join(&#39;&#39;) +&#39;&lt;/ul&gt;&#39;;\n}</code></pre></div>\n<p><a href=\"#table-of-contents\">⬆ back to top</a></p>\n<h2 id=\"functions\" style=\"position:relative;\"><a href=\"#functions\" aria-label=\"functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Functions</h2>\n<ul>\n<li>Function expressions:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// anonymous function expression\nvaranonymous=function() {\nreturntrue;\n};\n\n// named function expression\nvarnamed=functionnamed() {\nreturntrue;\n};\n\n// immediately-invoked function expression (IIFE)\n(function() {\nconsole.log(&#39;Welcome to the Internet. Please follow me.&#39;);\n})();</code></pre></div>\n<ul>\n<li>Never declare a function in a non-function block (if, while,  etc). Assign the function to a variable instead. Browsers will allow you  to do it, but they all interpret it differently, which is bad news  bears.</li>\n<li>Note: ECMA-262 defines a <code class=\"language-text\">block</code> as a list of statements. A function declaration is not a statement. <a href=\"http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf#page=97\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Read ECMA-262’s note on this issue</a>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\nif (currentUser) {\nfunctiontest() {\nconsole.log(&#39;Nope.&#39;);\n  }\n}\n\n// good\nvar test;\nif (currentUser) {\ntest=functiontest() {\nconsole.log(&#39;Yup.&#39;);\n  };\n}</code></pre></div>\n<ul>\n<li>Never name a parameter <code class=\"language-text\">arguments</code>. This will take precedence over the <code class=\"language-text\">arguments</code> object that is given to every function scope.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\nfunctionnope(name, options, arguments) {\n// ...stuff...\n}\n\n// good\nfunctionyup(name, options, args) {\n// ...stuff...\n}</code></pre></div>\n<p><a href=\"#table-of-contents\">⬆ back to top</a></p>\n<h2 id=\"properties\" style=\"position:relative;\"><a href=\"#properties\" aria-label=\"properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Properties</h2>\n<ul>\n<li>Use dot notation when accessing properties.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var luke = {\n  jedi:true,\n  age:28\n};\n\n// bad\nvar isJedi = luke[&#39;jedi&#39;];\n\n// good\nvar isJedi = luke.jedi;</code></pre></div>\n<ul>\n<li>Use subscript notation <code class=\"language-text\">[]</code> when accessing properties with a variable.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var luke = {\n  jedi:true,\n  age:28\n};\n\nfunctiongetProp(prop) {\nreturn luke[prop];\n}\n\nvar isJedi = getProp(&#39;jedi&#39;);</code></pre></div>\n<p><a href=\"#table-of-contents\">⬆ back to top</a></p>\n<h2 id=\"variables\" style=\"position:relative;\"><a href=\"#variables\" aria-label=\"variables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Variables</h2>\n<ul>\n<li>Always use <code class=\"language-text\">var</code> to declare variables. Not doing so  will result in global variables. We want to avoid polluting the global  namespace. Captain Planet warned us of that.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\nsuperPower =newSuperPower();\n\n// good\nvar superPower =newSuperPower();</code></pre></div>\n<ul>\n<li>Use one <code class=\"language-text\">var</code> declaration per variable. It’s easier to add new variable declarations this way, and you never have to worry about swapping out a <code class=\"language-text\">;</code> for a <code class=\"language-text\">,</code> or introducing punctuation-only diffs.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\nvar items = getItems(),\n    goSportsTeam =true,\n    dragonball =&#39;z&#39;;\n\n// bad\n// (compare to above, and try to spot the mistake)\nvar items = getItems(),\n    goSportsTeam =true;\n    dragonball =&#39;z&#39;;\n\n// good\nvar items = getItems();\nvar goSportsTeam =true;\nvar dragonball =&#39;z&#39;;</code></pre></div>\n<ul>\n<li>Declare unassigned variables last. This is helpful when later on  you might need to assign a variable depending on one of the previous  assigned variables.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\nvar i, len, dragonball,\n    items = getItems(),\n    goSportsTeam =true;\n\n// bad\nvar i;\nvar items = getItems();\nvar dragonball;\nvar goSportsTeam =true;\nvar len;\n\n// good\nvar items = getItems();\nvar goSportsTeam =true;\nvar dragonball;\nvar length;\nvar i;</code></pre></div>\n<ul>\n<li>Assign variables at the top of their scope. This helps avoid  issues with variable declaration and assignment hoisting related issues.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\nfunction() {\ntest();\nconsole.log(&#39;doing stuff..&#39;);\n\n//..other stuff..\n\nvar name = getName();\n\nif (name ===&#39;test&#39;) {\nreturnfalse;\n  }\n\nreturn name;\n}\n\n// good\nfunction() {\nvar name = getName();\n\ntest();\nconsole.log(&#39;doing stuff..&#39;);\n\n//..other stuff..\n\nif (name ===&#39;test&#39;) {\nreturnfalse;\n  }\n\nreturn name;\n}\n\n// bad\nfunction() {\nvar name = getName();\n\nif (!arguments.length) {\nreturnfalse;\n  }\n\nreturntrue;\n}\n\n// good\nfunction() {\nif (!arguments.length) {\nreturnfalse;\n  }\n\nvar name = getName();\n\nreturntrue;\n}</code></pre></div>\n<p><a href=\"#table-of-contents\">⬆ back to top</a></p>\n<h2 id=\"hoisting\" style=\"position:relative;\"><a href=\"#hoisting\" aria-label=\"hoisting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hoisting</h2>\n<ul>\n<li>Variable declarations get hoisted to the top of their scope, but their assignment does not.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// we know this wouldn&#39;t work (assuming there\n// is no notDefined global variable)\nfunctionexample() {\nconsole.log(notDefined); // =&gt; throws a ReferenceError\n}\n\n// creating a variable declaration after you\n// reference the variable will work due to\n// variable hoisting. Note: the assignment\n// value of `true` is not hoisted.\nfunctionexample() {\nconsole.log(declaredButNotAssigned); // =&gt; undefined\nvar declaredButNotAssigned =true;\n}\n\n// The interpreter is hoisting the variable\n// declaration to the top of the scope,\n// which means our example could be rewritten as:\nfunctionexample() {\nvar declaredButNotAssigned;\nconsole.log(declaredButNotAssigned); // =&gt; undefined\n  declaredButNotAssigned =true;\n}</code></pre></div>\n<ul>\n<li>Anonymous function expressions hoist their variable name, but not the function assignment.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">functionexample() {\nconsole.log(anonymous); // =&gt; undefined\n\n  anonymous(); // =&gt; TypeError anonymous is not a function\n\nvaranonymous=function() {\nconsole.log(&#39;anonymous function expression&#39;);\n  };\n}</code></pre></div>\n<ul>\n<li>Named function expressions hoist the variable name, not the function name or the function body.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">functionexample() {\nconsole.log(named); // =&gt; undefined\n\n  named(); // =&gt; TypeError named is not a function\n\n  superPower(); // =&gt; ReferenceError superPower is not defined\n\nvarnamed=functionsuperPower() {\nconsole.log(&#39;Flying&#39;);\n  };\n}\n\n// the same is true when the function name\n// is the same as the variable name.\nfunctionexample() {\nconsole.log(named); // =&gt; undefined\n\n  named(); // =&gt; TypeError named is not a function\n\nvarnamed=functionnamed() {\nconsole.log(&#39;named&#39;);\n  }\n}</code></pre></div>\n<ul>\n<li>Function declarations hoist their name and the function body.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">functionexample() {\n  superPower(); // =&gt; Flying\n\nfunctionsuperPower() {\nconsole.log(&#39;Flying&#39;);\n  }\n}</code></pre></div>\n<ul>\n<li>For more information refer to <a href=\"http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaScript Scoping &#x26; Hoisting</a> by <a href=\"http://www.adequatelygood.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ben Cherry</a>.</li>\n</ul>\n<p><a href=\"#table-of-contents\">⬆ back to top</a></p>\n<h2 id=\"comparison-operators--equality\" style=\"position:relative;\"><a href=\"#comparison-operators--equality\" aria-label=\"comparison operators  equality permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Comparison Operators &#x26; Equality</h2>\n<ul>\n<li>Use <code class=\"language-text\">===</code> and <code class=\"language-text\">!==</code> over <code class=\"language-text\">==</code> and <code class=\"language-text\">!=</code>.</li>\n<li>Comparison operators are evaluated using coercion with the <code class=\"language-text\">ToBoolean</code> method and always follow these simple rules:</li>\n<li>Objects evaluate to true</li>\n<li>Undefined evaluates to false</li>\n<li>Null evaluates to false</li>\n<li>Booleans evaluate to the value of the boolean</li>\n<li>Numbers evaluate to false if +0, -0, or NaN, otherwise true</li>\n<li>Strings evaluate to false if an empty string <code class=\"language-text\">&#39;&#39;</code>, otherwise true</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">if ([0]) {\n// true\n// An array is an object, objects evaluate to true\n}</code></pre></div>\n<ul>\n<li>Use shortcuts.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\nif (name !==&#39;&#39;) {\n// ...stuff...\n}\n\n// good\nif (name) {\n// ...stuff...\n}\n\n// bad\nif (collection.length&gt;0) {\n// ...stuff...\n}\n\n// good\nif (collection.length) {\n// ...stuff...\n}</code></pre></div>\n<ul>\n<li>For more information see <a href=\"http://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/#more-2108\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Truth Equality and JavaScript</a> by Angus Croll.</li>\n</ul>\n<p><a href=\"#table-of-contents\">⬆ back to top</a></p>\n<h2 id=\"blocks\" style=\"position:relative;\"><a href=\"#blocks\" aria-label=\"blocks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Blocks</h2>\n<ul>\n<li>Use braces with all multi-line blocks.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\nif (test)\nreturnfalse;\n\n// good\nif (test) returnfalse;\n\n// good\nif (test) {\nreturnfalse;\n}\n\n// bad\nfunction() { returnfalse; }\n\n// good\nfunction() {\nreturnfalse;\n}</code></pre></div>\n<ul>\n<li>If you’re using multi-line blocks with <code class=\"language-text\">if</code> and <code class=\"language-text\">else</code>, put <code class=\"language-text\">else</code> on the same line as your <code class=\"language-text\">if</code> block’s closing brace.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\nif (test) {\n  thing1();\n  thing2();\n}\nelse {\n  thing3();\n}\n\n// good\nif (test) {\n  thing1();\n  thing2();\n} else {\n  thing3();\n}</code></pre></div>\n<p><a href=\"#table-of-contents\">⬆ back to top</a></p>\n<h2 id=\"comments\" style=\"position:relative;\"><a href=\"#comments\" aria-label=\"comments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Comments</h2>\n<ul>\n<li>Use <code class=\"language-text\">/** ... */</code> for multi-line comments. Include a description, specify types and values for all parameters and return values.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\n// make() returns a new element\n// based on the passed in tag name\n//\n// @param {String} tag\n// @return {Element} element\nfunctionmake(tag) {\n\n// ...stuff...\n\nreturn element;\n}\n\n// good\n/**\n * make() returns a new element\n * based on the passed in tag name\n *\n * @param {String} tag\n * @return {Element} element\n */\nfunctionmake(tag) {\n\n// ...stuff...\n\nreturn element;\n}</code></pre></div>\n<ul>\n<li>Use <code class=\"language-text\">//</code> for single line comments. Place single line  comments on a newline above the subject of the comment. Put an empty  line before the comment.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\nvar active =true;  // is current tab\n\n// good\n// is current tab\nvar active =true;\n\n// bad\nfunctiongetType() {\nconsole.log(&#39;fetching type...&#39;);\n// set the default type to &#39;no type&#39;\nvar type =this._type ||&#39;no type&#39;;\n\nreturn type;\n}\n\n// good\nfunctiongetType() {\nconsole.log(&#39;fetching type...&#39;);\n\n// set the default type to &#39;no type&#39;\nvar type =this._type ||&#39;no type&#39;;\n\nreturn type;\n}</code></pre></div>\n<ul>\n<li>Prefixing your comments with <code class=\"language-text\">FIXME</code> or <code class=\"language-text\">TODO</code> helps other developers quickly understand if you’re pointing out a  problem that needs to be revisited, or if you’re suggesting a solution  to the problem that needs to be implemented. These are different than  regular comments because they are actionable. The actions are <code class=\"language-text\">FIXME -- need to figure this out</code> or <code class=\"language-text\">TODO -- need to implement</code>.</li>\n<li>Use <code class=\"language-text\">// FIXME:</code> to annotate problems.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">functionCalculator() {\n\n// FIXME: shouldn&#39;t use a global here\n  total =0;\n\nreturnthis;\n}</code></pre></div>\n<ul>\n<li>Use <code class=\"language-text\">// TODO:</code> to annotate solutions to problems.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">functionCalculator() {\n\n// TODO: total should be configurable by an options param\nthis.total =0;\n\nreturnthis;\n}</code></pre></div>\n<p><a href=\"#table-of-contents\">⬆ back to top</a></p>\n<h2 id=\"whitespace\" style=\"position:relative;\"><a href=\"#whitespace\" aria-label=\"whitespace permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Whitespace</h2>\n<ul>\n<li>Use soft tabs set to 2 spaces.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\nfunction() {\n∙∙∙∙var name;\n}\n\n// bad\nfunction() {\n∙var name;\n}\n\n// good\nfunction() {\n∙∙var name;\n}</code></pre></div>\n<ul>\n<li>Place 1 space before the leading brace.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\nfunctiontest(){\nconsole.log(&#39;test&#39;);\n}\n\n// good\nfunctiontest() {\nconsole.log(&#39;test&#39;);\n}\n\n// bad\ndog.set(&#39;attr&#39;,{\n  age:&#39;1 year&#39;,\n  breed:&#39;Bernese Mountain Dog&#39;\n});\n\n// good\ndog.set(&#39;attr&#39;, {\n  age:&#39;1 year&#39;,\n  breed:&#39;Bernese Mountain Dog&#39;\n});</code></pre></div>\n<ul>\n<li>Place 1 space before the opening parenthesis in control statements (<code class=\"language-text\">if</code>, <code class=\"language-text\">while</code> etc.). Place no space before the argument list in function calls and declarations.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\nif(isJedi) {\n  fight ();\n}\n\n// good\nif (isJedi) {\n  fight();\n}\n\n// bad\nfunctionfight () {\nconsole.log (&#39;Swooosh!&#39;);\n}\n\n// good\nfunctionfight() {\nconsole.log(&#39;Swooosh!&#39;);\n}</code></pre></div>\n<ul>\n<li>Set off operators with spaces.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\nvar x=y+5;\n\n// good\nvar x = y +5;</code></pre></div>\n<ul>\n<li>End files with a single newline character.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\n(function(global) {\n// ...stuff...\n})(this);</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\n(function(global) {\n// ...stuff...\n})(this);↵\n↵</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// good\n(function(global) {\n// ...stuff...\n})(this);↵</code></pre></div>\n<ul>\n<li>Use indentation when making long method chains. Use a leading dot, which emphasizes that the line is a method call, not a new statement.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\n$(&#39;#items&#39;).find(&#39;.selected&#39;).highlight().end().find(&#39;.open&#39;).updateCount();\n\n// bad\n$(&#39;#items&#39;).\nfind(&#39;.selected&#39;).\n    highlight().\n    end().\nfind(&#39;.open&#39;).\n    updateCount();\n\n// good\n$(&#39;#items&#39;)\n  .find(&#39;.selected&#39;)\n    .highlight()\n    .end()\n  .find(&#39;.open&#39;)\n    .updateCount();\n\n// bad\nvar leds = stage.selectAll(&#39;.led&#39;).data(data).enter().append(&#39;svg:svg&#39;).classed(&#39;led&#39;, true)\n    .attr(&#39;width&#39;,  (radius + margin) *2).append(&#39;svg:g&#39;)\n    .attr(&#39;transform&#39;, &#39;translate(&#39;+ (radius + margin) +&#39;,&#39;+ (radius + margin) +&#39;)&#39;)\n    .call(tron.led);\n\n// good\nvar leds = stage.selectAll(&#39;.led&#39;)\n    .data(data)\n  .enter().append(&#39;svg:svg&#39;)\n    .classed(&#39;led&#39;, true)\n    .attr(&#39;width&#39;,  (radius + margin) *2)\n  .append(&#39;svg:g&#39;)\n    .attr(&#39;transform&#39;, &#39;translate(&#39;+ (radius + margin) +&#39;,&#39;+ (radius + margin) +&#39;)&#39;)\n    .call(tron.led);</code></pre></div>\n<ul>\n<li>Leave a blank line after blocks and before the next statement</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\nif (foo) {\nreturn bar;\n}\nreturn baz;\n\n// good\nif (foo) {\nreturn bar;\n}\n\nreturn baz;\n\n// bad\nvar obj = {\nfoo:function() {\n  },\nbar:function() {\n  }\n};\nreturn obj;\n\n// good\nvar obj = {\nfoo:function() {\n  },\n\nbar:function() {\n  }\n};\n\nreturn obj;</code></pre></div>\n<p><a href=\"#table-of-contents\">⬆ back to top</a></p>\n<h2 id=\"commas\" style=\"position:relative;\"><a href=\"#commas\" aria-label=\"commas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Commas</h2>\n<ul>\n<li>Leading commas: Nope.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\nvar story = [\n    once\n  , upon\n  , aTime\n];\n\n// good\nvar story = [\n  once,\n  upon,\n  aTime\n];\n\n// bad\nvar hero = {\n    firstName:&#39;Bob&#39;\n  , lastName:&#39;Parr&#39;\n  , heroName:&#39;Mr. Incredible&#39;\n  , superPower:&#39;strength&#39;\n};\n\n// good\nvar hero = {\n  firstName:&#39;Bob&#39;,\n  lastName:&#39;Parr&#39;,\n  heroName:&#39;Mr. Incredible&#39;,\n  superPower:&#39;strength&#39;\n};</code></pre></div>\n<ul>\n<li>Additional trailing comma: Nope. This can cause  problems with IE6/7 and IE9 if it’s in quirksmode. Also, in some  implementations of ES3 would add length to an array if it had an  additional trailing comma. This was clarified in ES5 (<a href=\"http://es5.github.io/#D\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source</a>):</li>\n</ul>\n<blockquote>\n<p>Edition 5 clarifies the fact that a trailing comma at the end of an  ArrayInitialiser does not add to the length of the array. This is not a  semantic change from Edition 3 but some implementations may have  previously misinterpreted this.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\nvar hero = {\n    firstName:&#39;Kevin&#39;,\n    lastName:&#39;Flynn&#39;,\n  };\n\nvar heroes = [\n&#39;Batman&#39;,\n&#39;Superman&#39;,\n  ];\n\n// good\nvar hero = {\n    firstName:&#39;Kevin&#39;,\n    lastName:&#39;Flynn&#39;\n  };\n\nvar heroes = [\n&#39;Batman&#39;,\n&#39;Superman&#39;\n  ];</code></pre></div>\n<p><a href=\"#table-of-contents\">⬆ back to top</a></p>\n<h2 id=\"semicolons\" style=\"position:relative;\"><a href=\"#semicolons\" aria-label=\"semicolons permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Semicolons</h2>\n<ul>\n<li>Yup.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\n(function() {\nvar name =&#39;Skywalker&#39;\nreturn name\n})()\n\n// good\n(function() {\nvar name =&#39;Skywalker&#39;;\nreturn name;\n})();\n\n// good (guards against the function becoming an argument when two files with IIFEs are concatenated)\n;(function() {\nvar name =&#39;Skywalker&#39;;\nreturn name;\n})();</code></pre></div>\n<p><a href=\"http://stackoverflow.com/a/7365214/1712802\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Read more</a>.</p>\n<p><a href=\"#table-of-contents\">⬆ back to top</a></p>\n<h2 id=\"type-casting--coercion\" style=\"position:relative;\"><a href=\"#type-casting--coercion\" aria-label=\"type casting  coercion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type Casting &#x26; Coercion</h2>\n<ul>\n<li>Perform type coercion at the beginning of the statement.</li>\n<li>Strings:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//  =&gt; this.reviewScore = 9;\n\n// bad\nvar totalScore =this.reviewScore +&#39;&#39;;\n\n// good\nvar totalScore =&#39;&#39;+this.reviewScore;\n\n// bad\nvar totalScore =&#39;&#39;+this.reviewScore +&#39; total score&#39;;\n\n// good\nvar totalScore =this.reviewScore +&#39; total score&#39;;</code></pre></div>\n<ul>\n<li>Use <code class=\"language-text\">parseInt</code> for Numbers and always with a radix for type casting.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var inputValue =&#39;4&#39;;\n\n// bad\nvar val =newNumber(inputValue);\n\n// bad\nvar val =+inputValue;\n\n// bad\nvar val = inputValue &gt;&gt;0;\n\n// bad\nvar val =parseInt(inputValue);\n\n// good\nvar val =Number(inputValue);\n\n// good\nvar val =parseInt(inputValue, 10);</code></pre></div>\n<ul>\n<li>If for whatever reason you are doing something wild and <code class=\"language-text\">parseInt</code> is your bottleneck and need to use Bitshift for <a href=\"http://jsperf.com/coercion-vs-casting/3\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">performance reasons</a>, leave a comment explaining why and what you’re doing.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// good\n/**\n * parseInt was the reason my code was slow.\n * Bitshifting the String to coerce it to a\n * Number made it a lot faster.\n */\nvar val = inputValue &gt;&gt;0;</code></pre></div>\n<ul>\n<li>Note: Be careful when using bitshift operations. Numbers are represented as <a href=\"http://es5.github.io/#x4.3.19\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">64-bit values</a>, but Bitshift operations always return a 32-bit integer (<a href=\"http://es5.github.io/#x11.7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source</a>). Bitshift can lead to unexpected behavior for integer values larger than 32 bits. <a href=\"https://github.com/airbnb/javascript/issues/109\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Discussion</a>. Largest signed 32-bit Int is 2,147,483,647:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">2147483647&gt;&gt;0//=&gt; 2147483647\n2147483648&gt;&gt;0//=&gt; -2147483648\n2147483649&gt;&gt;0//=&gt; -2147483647</code></pre></div>\n<ul>\n<li>Booleans:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var age =0;\n\n// bad\nvar hasAge =newBoolean(age);\n\n// good\nvar hasAge =Boolean(age);\n\n// good\nvar hasAge =!!age;</code></pre></div>\n<p><a href=\"#table-of-contents\">⬆ back to top</a></p>\n<h2 id=\"naming-conventions\" style=\"position:relative;\"><a href=\"#naming-conventions\" aria-label=\"naming conventions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Naming Conventions</h2>\n<ul>\n<li>Avoid single letter names. Be descriptive with your naming.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\nfunctionq() {\n// ...stuff...\n}\n\n// good\nfunctionquery() {\n// ..stuff..\n}</code></pre></div>\n<ul>\n<li>Use camelCase when naming objects, functions, and instances.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\nvar OBJEcttsssss = {};\nvar this_is_my_object = {};\nfunctionc() {}\nvar u =newuser({\n  name:&#39;Bob Parr&#39;\n});\n\n// good\nvar thisIsMyObject = {};\nfunctionthisIsMyFunction() {}\nvar user =newUser({\n  name:&#39;Bob Parr&#39;\n});</code></pre></div>\n<ul>\n<li>Use PascalCase when naming constructors or classes.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\nfunctionuser(options) {\nthis.name= options.name;\n}\n\nvar bad =newuser({\n  name:&#39;nope&#39;\n});\n\n// good\nfunctionUser(options) {\nthis.name= options.name;\n}\n\nvar good =newUser({\n  name:&#39;yup&#39;\n});</code></pre></div>\n<ul>\n<li>Use a leading underscore <code class=\"language-text\">_</code> when naming private properties.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\nthis.__firstName__ =&#39;Panda&#39;;\nthis.firstName_ =&#39;Panda&#39;;\n\n// good\nthis._firstName =&#39;Panda&#39;;</code></pre></div>\n<ul>\n<li>When saving a reference to <code class=\"language-text\">this</code> use <code class=\"language-text\">_this</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\nfunction() {\nvar self =this;\nreturnfunction() {\nconsole.log(self);\n  };\n}\n\n// bad\nfunction() {\nvar that =this;\nreturnfunction() {\nconsole.log(that);\n  };\n}\n\n// good\nfunction() {\nvar _this =this;\nreturnfunction() {\nconsole.log(_this);\n  };\n}</code></pre></div>\n<ul>\n<li>Name your functions. This is helpful for stack traces.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\nvarlog=function(msg) {\nconsole.log(msg);\n};\n\n// good\nvarlog=functionlog(msg) {\nconsole.log(msg);\n};</code></pre></div>\n<ul>\n<li>Note: IE8 and below exhibit some quirks with named function expressions.  See <a href=\"http://kangax.github.io/nfe/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://kangax.github.io/nfe/</a> for more info.</li>\n<li>If your file exports a single class, your filename should be exactly the name of the class.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// file contents\nclassCheckBox {\n// ...\n}\nmodule.exports = CheckBox;\n\n// in some other file\n// bad\nvar CheckBox =require(&#39;./checkBox&#39;);\n\n// bad\nvar CheckBox =require(&#39;./check_box&#39;);\n\n// good\nvar CheckBox =require(&#39;./CheckBox&#39;);</code></pre></div>\n<p><a href=\"#table-of-contents\">⬆ back to top</a></p>\n<h2 id=\"accessors\" style=\"position:relative;\"><a href=\"#accessors\" aria-label=\"accessors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Accessors</h2>\n<ul>\n<li>Accessor functions for properties are not required.</li>\n<li>If you do make accessor functions use getVal() and setVal(‘hello’).</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\ndragon.age();\n\n// good\ndragon.getAge();\n\n// bad\ndragon.age(25);\n\n// good\ndragon.setAge(25);</code></pre></div>\n<ul>\n<li>If the property is a boolean, use isVal() or hasVal().</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\nif (!dragon.age()) {\nreturnfalse;\n}\n\n// good\nif (!dragon.hasAge()) {\nreturnfalse;\n}</code></pre></div>\n<ul>\n<li>It’s okay to create get() and set() functions, but be consistent.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">functionJedi(options) {\n  options || (options = {});\nvar lightsaber = options.lightsaber ||&#39;blue&#39;;\nthis.set(&#39;lightsaber&#39;, lightsaber);\n}\n\nJedi.prototype.set=function(key, val) {\nthis[key] = val;\n};\n\nJedi.prototype.get=function(key) {\nreturnthis[key];\n};</code></pre></div>\n<p><a href=\"#table-of-contents\">⬆ back to top</a></p>\n<h2 id=\"constructors\" style=\"position:relative;\"><a href=\"#constructors\" aria-label=\"constructors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Constructors</h2>\n<ul>\n<li>Assign methods to the prototype object, instead of overwriting  the prototype with a new object. Overwriting the prototype makes  inheritance impossible: by resetting the prototype you’ll overwrite the  base!</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">functionJedi() {\nconsole.log(&#39;new jedi&#39;);\n}\n\n// bad\nJedi.prototype= {\nfight:functionfight() {\nconsole.log(&#39;fighting&#39;);\n  },\n\nblock:functionblock() {\nconsole.log(&#39;blocking&#39;);\n  }\n};\n\n// good\nJedi.prototype.fight=functionfight() {\nconsole.log(&#39;fighting&#39;);\n};\n\nJedi.prototype.block=functionblock() {\nconsole.log(&#39;blocking&#39;);\n};</code></pre></div>\n<ul>\n<li>Methods can return <code class=\"language-text\">this</code> to help with method chaining.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\nJedi.prototype.jump=function() {\nthis.jumping =true;\nreturntrue;\n};\n\nJedi.prototype.setHeight=function(height) {\nthis.height= height;\n};\n\nvar luke =newJedi();\nluke.jump(); // =&gt; true\nluke.setHeight(20); // =&gt; undefined\n\n// good\nJedi.prototype.jump=function() {\nthis.jumping =true;\nreturnthis;\n};\n\nJedi.prototype.setHeight=function(height) {\nthis.height= height;\nreturnthis;\n};\n\nvar luke =newJedi();\n\nluke.jump()\n  .setHeight(20);</code></pre></div>\n<ul>\n<li>It’s okay to write a custom toString() method, just make sure it works successfully and causes no side effects.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">functionJedi(options) {\n  options || (options = {});\nthis.name= options.name||&#39;no name&#39;;\n}\n\nJedi.prototype.getName=functiongetName() {\nreturnthis.name;\n};\n\nJedi.prototype.toString=functiontoString() {\nreturn&#39;Jedi - &#39;+this.getName();\n};</code></pre></div>\n<p><a href=\"#table-of-contents\">⬆ back to top</a></p>\n<h2 id=\"events\" style=\"position:relative;\"><a href=\"#events\" aria-label=\"events permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Events</h2>\n<ul>\n<li>When attaching data payloads to events (whether DOM events or  something more proprietary like Backbone events), pass a hash instead of  a raw value. This allows a subsequent contributor to add more data to  the event payload without finding and updating every handler for the  event. For example, instead of:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\n$(this).trigger(&#39;listingUpdated&#39;, listing.id);\n\n...\n\n$(this).on(&#39;listingUpdated&#39;, function(e, listingId) {\n// do something with listingId\n});</code></pre></div>\n<p>prefer:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// good\n$(this).trigger(&#39;listingUpdated&#39;, { listingId : listing.id });\n\n...\n\n$(this).on(&#39;listingUpdated&#39;, function(e, data) {\n// do something with data.listingId\n});</code></pre></div>\n<p><a href=\"#table-of-contents\">⬆ back to top</a></p>\n<h2 id=\"modules\" style=\"position:relative;\"><a href=\"#modules\" aria-label=\"modules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Modules</h2>\n<ul>\n<li>The module should start with a <code class=\"language-text\">!</code>. This ensures that if a  malformed module forgets to include a final semicolon there aren’t  errors in production when the scripts get concatenated. <a href=\"https://github.com/airbnb/javascript/issues/44#issuecomment-13063933\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Explanation</a></li>\n<li>The file should be named with camelCase, live in a folder with the same name, and match the name of the single export.</li>\n<li>Add a method called <code class=\"language-text\">noConflict()</code> that sets the exported module to the previous version and returns this one.</li>\n<li>Always declare <code class=\"language-text\">&#39;use strict&#39;;</code> at the top of the module.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// fancyInput/fancyInput.js\n\n!function(global) {\n&#39;use strict&#39;;\n\nvar previousFancyInput =global.FancyInput;\n\nfunctionFancyInput(options) {\nthis.options= options || {};\n  }\n\nFancyInput.noConflict=functionnoConflict() {\nglobal.FancyInput = previousFancyInput;\nreturn FancyInput;\n  };\n\nglobal.FancyInput = FancyInput;\n}(this);</code></pre></div>\n<p><a href=\"#table-of-contents\">⬆ back to top</a></p>\n<h2 id=\"jquery\" style=\"position:relative;\"><a href=\"#jquery\" aria-label=\"jquery permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>jQuery</h2>\n<ul>\n<li>Prefix jQuery object variables with a <code class=\"language-text\">$</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\nvar sidebar = $(&#39;.sidebar&#39;);\n\n// good\nvar $sidebar = $(&#39;.sidebar&#39;);</code></pre></div>\n<ul>\n<li>Cache jQuery lookups.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\nfunctionsetSidebar() {\n  $(&#39;.sidebar&#39;).hide();\n\n// ...stuff...\n\n  $(&#39;.sidebar&#39;).css({\n&#39;background-color&#39;:&#39;pink&#39;\n  });\n}\n\n// good\nfunctionsetSidebar() {\nvar $sidebar = $(&#39;.sidebar&#39;);\n  $sidebar.hide();\n\n// ...stuff...\n\n  $sidebar.css({\n&#39;background-color&#39;:&#39;pink&#39;\n  });\n}</code></pre></div>\n<ul>\n<li>For DOM queries use Cascading <code class=\"language-text\">$(&#39;.sidebar ul&#39;)</code> or parent > child <code class=\"language-text\">$(&#39;.sidebar &gt; ul&#39;)</code>. <a href=\"http://jsperf.com/jquery-find-vs-context-sel/16\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">jsPerf</a></li>\n<li>Use <code class=\"language-text\">find</code> with scoped jQuery object queries.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// bad\n$(&#39;ul&#39;, &#39;.sidebar&#39;).hide();\n\n// bad\n$(&#39;.sidebar&#39;).find(&#39;ul&#39;).hide();\n\n// good\n$(&#39;.sidebar ul&#39;).hide();\n\n// good\n$(&#39;.sidebar &gt; ul&#39;).hide();\n\n// good\n$sidebar.find(&#39;ul&#39;).hide();</code></pre></div>\n<p><a href=\"#table-of-contents\">⬆ back to top</a></p>\n<h2 id=\"ecmascript-5-compatibility\" style=\"position:relative;\"><a href=\"#ecmascript-5-compatibility\" aria-label=\"ecmascript 5 compatibility permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ECMAScript 5 Compatibility</h2>\n<ul>\n<li>Refer to <a href=\"https://twitter.com/kangax/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Kangax</a>’s ES5 <a href=\"http://kangax.github.com/es5-compat-table/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">compatibility table</a>.</li>\n</ul>\n<p><a href=\"#table-of-contents\">⬆ back to top</a></p>\n<h2 id=\"testing\" style=\"position:relative;\"><a href=\"#testing\" aria-label=\"testing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Testing</h2>\n<ul>\n<li>Yup.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function() {\nreturntrue;\n}</code></pre></div>\n<p><a href=\"#table-of-contents\">⬆ back to top</a></p>\n<h2 id=\"performance\" style=\"position:relative;\"><a href=\"#performance\" aria-label=\"performance permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Performance</h2>\n<ul>\n<li><a href=\"http://kellegous.com/j/2013/01/26/layout-performance/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">On Layout &#x26; Web Performance</a></li>\n<li><a href=\"http://jsperf.com/string-vs-array-concat/2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">String vs Array Concat</a></li>\n<li><a href=\"http://jsperf.com/try-catch-in-loop-cost\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Try/Catch Cost In a Loop</a></li>\n<li><a href=\"http://jsperf.com/bang-function\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Bang Function</a></li>\n<li><a href=\"http://jsperf.com/jquery-find-vs-context-sel/13\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">jQuery Find vs Context, Selector</a></li>\n<li><a href=\"http://jsperf.com/innerhtml-vs-textcontent-for-script-text\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">innerHTML vs textContent for script text</a></li>\n<li><a href=\"http://jsperf.com/ya-string-concat\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Long String Concatenation</a></li>\n<li>Loading…</li>\n</ul>\n<p><a href=\"#table-of-contents\">⬆ back to top</a></p>\n<h2 id=\"resources\" style=\"position:relative;\"><a href=\"#resources\" aria-label=\"resources permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Resources</h2>\n<p>Read This</p>\n<ul>\n<li><a href=\"http://es5.github.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Annotated ECMAScript 5.1</a></li>\n</ul>\n<p>Tools</p>\n<ul>\n<li>Code Style Linters  </li>\n<li><a href=\"http://www.jshint.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JSHint</a> - <a href=\"https://github.com/airbnb/javascript/blob/master/linters/jshintrc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Airbnb Style .jshintrc</a></li>\n<li><a href=\"https://github.com/jscs-dev/node-jscs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JSCS</a> - <a href=\"https://github.com/jscs-dev/node-jscs/blob/master/presets/airbnb.json\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Airbnb Style Preset</a></li>\n</ul>\n<p>Other Styleguides</p>\n<ul>\n<li><a href=\"http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google JavaScript Style Guide</a></li>\n<li><a href=\"http://docs.jquery.com/JQuery_Core_Style_Guidelines\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">jQuery Core Style Guidelines</a></li>\n<li><a href=\"https://github.com/rwldrn/idiomatic.js/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Principles of Writing Consistent, Idiomatic JavaScript</a></li>\n<li><a href=\"https://github.com/feross/standard\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaScript Standard Style</a></li>\n</ul>\n<p>Other Styles</p>\n<ul>\n<li><a href=\"https://gist.github.com/4135065\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Naming this in nested functions</a> - Christian Johansen</li>\n<li><a href=\"https://github.com/airbnb/javascript/issues/52\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Conditional Callbacks</a> - Ross Allen</li>\n<li><a href=\"http://sideeffect.kr/popularconvention/#javascript\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Popular JavaScript Coding Conventions on Github</a> - JeongHoon Byun</li>\n<li><a href=\"http://benalman.com/news/2012/05/multiple-var-statements-javascript/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Multiple var statements in JavaScript, not superfluous</a> - Ben Alman</li>\n</ul>\n<p>Further Reading</p>\n<ul>\n<li><a href=\"http://javascriptweblog.wordpress.com/2010/10/25/understanding-javascript-closures/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Understanding JavaScript Closures</a> - Angus Croll</li>\n<li><a href=\"http://www.2ality.com/2013/06/basic-javascript.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Basic JavaScript for the impatient programmer</a> - Dr. Axel Rauschmayer</li>\n<li><a href=\"http://youmightnotneedjquery.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">You Might Not Need jQuery</a> - Zack Bloom &#x26; Adam Schwartz</li>\n<li><a href=\"https://github.com/lukehoban/es6features\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ES6 Features</a> - Luke Hoban</li>\n<li><a href=\"https://github.com/bendc/frontend-guidelines\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Frontend Guidelines</a> - Benjamin De Cock</li>\n</ul>\n<p>Books</p>\n<ul>\n<li><a href=\"http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaScript: The Good Parts</a> - Douglas Crockford</li>\n<li><a href=\"http://www.amazon.com/JavaScript-Patterns-Stoyan-Stefanov/dp/0596806752\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaScript Patterns</a> - Stoyan Stefanov</li>\n<li><a href=\"http://www.amazon.com/JavaScript-Design-Patterns-Recipes-Problem-Solution/dp/159059908X\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pro JavaScript Design Patterns</a>  - Ross Harmes and Dustin Diaz</li>\n<li><a href=\"http://www.amazon.com/High-Performance-Web-Sites-Essential/dp/0596529309\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">High Performance Web Sites: Essential Knowledge for Front-End Engineers</a> - Steve Souders</li>\n<li><a href=\"http://www.amazon.com/Maintainable-JavaScript-Nicholas-C-Zakas/dp/1449327680\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Maintainable JavaScript</a> - Nicholas C. Zakas</li>\n<li><a href=\"http://www.amazon.com/JavaScript-Web-Applications-Alex-MacCaw/dp/144930351X\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaScript Web Applications</a> - Alex MacCaw</li>\n<li><a href=\"http://www.amazon.com/Pro-JavaScript-Techniques-John-Resig/dp/1590597273\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pro JavaScript Techniques</a> - John Resig</li>\n<li><a href=\"http://www.amazon.com/Smashing-Node-js-JavaScript-Everywhere-Magazine/dp/1119962595\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Smashing Node.js: JavaScript Everywhere</a> - Guillermo Rauch</li>\n<li><a href=\"http://www.amazon.com/Secrets-JavaScript-Ninja-John-Resig/dp/193398869X\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Secrets of the JavaScript Ninja</a> - John Resig and Bear Bibeault</li>\n<li><a href=\"http://humanjavascript.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Human JavaScript</a> - Henrik Joreteg</li>\n<li><a href=\"http://superherojs.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Superhero.js</a> - Kim Joar Bekkelund, Mads Mobæk, &#x26; Olav Bjorkoy</li>\n<li><a href=\"http://jsbooks.revolunet.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JSBooks</a> - Julien Bouquillon</li>\n<li><a href=\"http://manning.com/vinegar/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Third Party JavaScript</a> - Ben Vinegar and Anton Kovalyov</li>\n<li><a href=\"http://amzn.com/0321812182\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Effective JavaScript: 68 Specific Ways to Harness the Power of JavaScript</a> - David Herman</li>\n<li><a href=\"http://eloquentjavascript.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Eloquent JavaScript</a> - Marijn Haverbeke</li>\n<li><a href=\"https://github.com/getify/You-Dont-Know-JS\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">You Don’t Know JS</a> - Kyle Simpson</li>\n</ul>\n<p>Blogs</p>\n<ul>\n<li><a href=\"http://dailyjs.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">DailyJS</a></li>\n<li><a href=\"http://javascriptweekly.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaScript Weekly</a></li>\n<li><a href=\"http://javascriptweblog.wordpress.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaScript, JavaScript…</a></li>\n<li><a href=\"http://weblog.bocoup.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Bocoup Weblog</a></li>\n<li><a href=\"http://www.adequatelygood.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Adequately Good</a></li>\n<li><a href=\"http://www.nczonline.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NCZOnline</a></li>\n<li><a href=\"http://perfectionkills.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Perfection Kills</a></li>\n<li><a href=\"http://benalman.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ben Alman</a></li>\n<li><a href=\"http://dmitry.baranovskiy.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dmitry Baranovskiy</a></li>\n<li><a href=\"http://dustindiaz.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dustin Diaz</a></li>\n<li><a href=\"http://net.tutsplus.com/?s=javascript\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">nettuts</a></li>\n</ul>\n<p>Podcasts</p>\n<ul>\n<li><a href=\"http://devchat.tv/js-jabber/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaScript Jabber</a></li>\n</ul>","fields":{"slug":"/2015/08/javascript-style-guide.html","tagSlugs":["/tag/style-guide/","/tag/javascript/"]},"frontmatter":{"date":"2015-08-01T10:22:00.001+07:00","description":"A mostly reasonable approach to JavaScript.","tags":["style guide","javascript"],"title":"JavaScript Style Guide","fbCommentUrl":"none"}}},"pageContext":{"slug":"/2015/08/javascript-style-guide.html"}}}