{"componentChunkName":"component---src-templates-post-template-tsx","path":"/2021/12/rust-strategy-design-pattern.html","result":{"data":{"markdownRemark":{"id":"bc6be415-6b5d-548b-bc5b-55cbf7ca512a","html":"<p><a href=\"https://en.wikipedia.org/wiki/Strategy_pattern\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Strategy design pattern</a> là một technique nhằm mục đích phân tách nhiều vấn đề,\ntách software modules thông qua <a href=\"https://en.wikipedia.org/wiki/Dependency_inversion_principle\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dependency Inversion</a>.\nÝ tưởng cơ bản của Strategy pattern là chỉ cần define skeleton ở abstract level, chúng ta tách biệt phần implementation\ncủa logic thành nhiều phần. Client sử dụng có thể tự implement 1 số method theo cách riêng của nó nhưng vẫn giữ được\ncấu trúc của logic workflow gốc. Abstract class không không phụ thuộc vào implementation của lớp dẫn xuất (derived class),\nnhưng implementation của lớp dẫn xuất phải tuân thủ theo đặc tả của lớp abstract. Cho nên chúng có tên gọi là Dependency Inversion.</p>\n<p>Một thứ mình thấy rõ là các project Rust rất hay sử dụng Strategy Design Pattern này.</p>\n<p>Ví dụ, chúng ta có 1 <code class=\"language-text\">struct Data</code> và implement một số phương thức để generate ra\nnhiều dạng format khác nhau (ví dụ <code class=\"language-text\">JSON</code>, <code class=\"language-text\">YAML</code>, <code class=\"language-text\">Plain Text</code>, …).\nTa gọi mỗi format ở đây là một strategy.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>collections<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Data</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">u32</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Data</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">match</span> format <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"json\"</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">...</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token string\">\"yaml\"</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">...</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token string\">\"text\"</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">...</span> <span class=\"token punctuation\">}</span>\n      _      <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">...</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Mọi thứ thay đổi theo thời gian, và khó đoán được trong tương lai chương trình\ncủa chúng ta có thể sửa đổi hoặc bổ sung thêm các loại format nào nữa\ntrong tương lai hay không (ví dụ <code class=\"language-text\">JSONLine</code>, <code class=\"language-text\">CSV</code>, <code class=\"language-text\">Parquet</code>, …)</p>\n<p>Nếu thiết kế sử dụng Strategy Pattern:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>collections<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Data</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Data</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">u32</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Data</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// f: T chap nhan moi struct co impl Formatter</span>\n  <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">generate</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Formatter</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{</span>\n    f<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Formatter</span>\n<span class=\"token keyword\">trait</span> <span class=\"token class-name\">Formatter</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">format</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">Data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Formatter -> Json</span>\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Json</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Formatter</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">Json</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">format</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">Data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// res = { \"a\": 1, \"b\": 2. /// }</span>\n    res\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Formatter -> Text</span>\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Text</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Formatter</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">Text</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">format</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">Data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// res = \"a = 1, b = 2, ...\"</span>\n    res\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> data <span class=\"token operator\">=</span> <span class=\"token class-name\">Data</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  data<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  data<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Text</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token macro property\">assert!</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a = b, b = 2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Json</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token macro property\">assert!</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">r#\"{\"a\":1, \"b\":2}\"#</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Theo chúng ta có thể thấy, <code class=\"language-text\">Data::generate</code> có thể không cần quan tâm implementation\ncủa <code class=\"language-text\">f: T</code>. Chỉ cần biết nó là một dẫn xuất của <code class=\"language-text\">trait Formatter</code> và có method <code class=\"language-text\">format</code>.</p>\n<p><strong>Nhược điểm</strong> là mỗi strategy cần được implement ít nhất một module,\nvì thế số lượng module có thể tăng cùng với số lượng strategy.\nCó quá nhiều strategy đòi hỏi user phải biết sự khác nhau giữa các strategy để sử dụng.</p>\n<p><strong>Ưu điểm</strong> là chúng ta có thể tách việc xử lý <code class=\"language-text\">Json</code>, <code class=\"language-text\">Text</code>, … ra thành nhiều bài toán (strategy) nhỏ hơn theo như ví dụ trên.</p>\n<p>Ở ví dụ trên các strategy được đặt chung ở một file,\nthực tế người ta thưởng đặt ở nhiều module khác nhau hoặc mỗi strategy một file\n(<code class=\"language-text\">formatter::json</code>, <code class=\"language-text\">formatter::csv</code>, …). Việc tách này còn cho phép sử dụng compiler feature flags.</p>\n<p>Còn nếu chúng ta đang implement một <code class=\"language-text\">crate</code>, thì <code class=\"language-text\">crate</code> ở ví dụ trên user có thể dễ dàng custom một <code class=\"language-text\">Formatter</code> mới:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token keyword\">crate</span><span class=\"token module-declaration namespace\"><span class=\"token punctuation\">::</span>example<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{</span><span class=\"token class-name\">Data</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Formatter</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">CustomFormatter</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Formatter</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">CustomFormatter</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">format</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">Data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">serde</code> là một ví dụ hay của <code class=\"language-text\">Strategy</code> pattern, serde cho phép\n<a href=\"https://serde.rs/custom-serialization.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">full customization</a> serialization\nbehavior bằng cách implement <code class=\"language-text\">Serialize</code> và <code class=\"language-text\">Deserialize</code> traits cho kiểu dữ liệu riêng của chúng ta.</p>","fields":{"slug":"/2021/12/rust-strategy-design-pattern.html","tagSlugs":["/tag/rust/"]},"frontmatter":{"date":"2021-12-19T00:00:00.000+07:00","description":"Strategy design pattern là một technique nhằm mục đích phân tách nhiều vấn đề, tách software modules thông qua Dependency Inversion.","tags":["Rust"],"title":"Rust Strategy Design Pattern","fbCommentUrl":"none"}}},"pageContext":{"slug":"/2021/12/rust-strategy-design-pattern.html"}},"staticQueryHashes":["251939775","2672868365","401334301"]}