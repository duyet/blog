{"componentChunkName":"component---src-templates-post-template-tsx","path":"/2021/07/postgres-full-text-search.html","result":{"data":{"markdownRemark":{"id":"7cb1f07e-25b0-5843-965c-4466225f6928","html":"<p>Postgres has built-in functions to handle Full Text Search queries. This is like a “search engine” within Postgres.</p>\n<h1 id=\"to_tsvector\" style=\"position:relative;\"><a href=\"#to_tsvector\" aria-label=\"to_tsvector permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>to_tsvector()</h1>\n<p>Converts your data into searchable “tokens”. <code class=\"language-text\">to_tsvector()</code> stands for “to text search vector”. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> to_tsvector<span class=\"token punctuation\">(</span><span class=\"token string\">\"the green eggs and ham\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- Returns 'egg':2 'green':1 'ham':4</span>\n\n\n<span class=\"token keyword\">select</span> to_tsvector<span class=\"token punctuation\">(</span><span class=\"token string\">\"the green egg and ham\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- Returns 'egg':2 'green':1 'ham':4</span></code></pre></div>\n<p>Collectively these tokens are called a <em>document</em> which Postgres can use for comparisons,\nwhere every token is a lexeme (unit of lexical meaning). The stopwords (<em>and</em>, <em>or</em>, <em>the</em>, …)\nare conveniently omitted. As you can see, the <code class=\"language-text\">eggs</code> will be normalized as a lexeme in English: <code class=\"language-text\">egg</code>.</p>\n<h1 id=\"to_tsquery\" style=\"position:relative;\"><a href=\"#to_tsquery\" aria-label=\"to_tsquery permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>to_tsquery()</h1>\n<p><code class=\"language-text\">to_tsquery()</code>, which accepts a list of words that will be checked against\nthe normalized vector we created with <code class=\"language-text\">to_tsvector()</code>.</p>\n<p>The <code class=\"language-text\">@@</code> operator to check if <code class=\"language-text\">tsquery</code> matches <code class=\"language-text\">tsvector</code>, it’s returns true (<code class=\"language-text\">t</code>) if matched,\notherwise returns false (<code class=\"language-text\">f</code>).</p>\n<p>Let’s see some queries below:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> to_tsvector<span class=\"token punctuation\">(</span><span class=\"token string\">\"the green eggs and ham\"</span><span class=\"token punctuation\">)</span> @@ to_tsquery<span class=\"token punctuation\">(</span><span class=\"token string\">\"egg\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">?column?\n--------\nt</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> to_tsvector<span class=\"token punctuation\">(</span><span class=\"token string\">\"the green eggs and ham\"</span><span class=\"token punctuation\">)</span> @@ to_tsquery<span class=\"token punctuation\">(</span><span class=\"token string\">\"eggs\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">?column?\n--------\nt</code></pre></div>\n<p>Use <code class=\"language-text\">&amp;</code> for <strong>AND</strong> in the search query:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> to_tsvector<span class=\"token punctuation\">(</span><span class=\"token string\">\"the green eggs and ham\"</span><span class=\"token punctuation\">)</span> @@ to_tsquery<span class=\"token punctuation\">(</span><span class=\"token string\">\"eggs &amp; red\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">?column?\n--------\nf</code></pre></div>\n<p>Use <code class=\"language-text\">|</code> for <strong>OR</strong> in the search query:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> to_tsvector<span class=\"token punctuation\">(</span><span class=\"token string\">\"the green eggs and ham\"</span><span class=\"token punctuation\">)</span> @@ to_tsquery<span class=\"token punctuation\">(</span><span class=\"token string\">\"eggs | red\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">?column?\n--------\nt</code></pre></div>\n<p>Use the proximity symbol <code class=\"language-text\">&lt;-></code> for searching for terms that are a certain “distance” apart.\nFor example, search the phase <code class=\"language-text\">green egg</code>, <code class=\"language-text\">green</code> is followed immediately by a match for <code class=\"language-text\">egg</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> to_tsvector<span class=\"token punctuation\">(</span><span class=\"token string\">\"the green eggs and ham\"</span><span class=\"token punctuation\">)</span> @@ to_tsquery<span class=\"token punctuation\">(</span><span class=\"token string\">\"green &lt;-> egg\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">?column?\n--------\nt</code></pre></div>\n<p>For example, search for the phase <code class=\"language-text\">egg [1 word] ham</code>, find <code class=\"language-text\">egg</code> and <code class=\"language-text\">ham</code> within 2 words of each other:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> to_tsvector<span class=\"token punctuation\">(</span><span class=\"token string\">\"the green eggs and ham\"</span><span class=\"token punctuation\">)</span> @@ to_tsquery<span class=\"token punctuation\">(</span><span class=\"token string\">\"egg &lt;1> ham\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">?column?\n--------\nt</code></pre></div>\n<p>Use the negation symbol <code class=\"language-text\">!</code> to find phrases which <strong>don’t</strong> contain a search term.\nFor example, search for the phase that have <code class=\"language-text\">egg</code> but not <code class=\"language-text\">ham</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> to_tsvector<span class=\"token punctuation\">(</span><span class=\"token string\">\"the green eggs and ham\"</span><span class=\"token punctuation\">)</span> @@ to_tsquery<span class=\"token punctuation\">(</span><span class=\"token string\">\"egg &amp; !ham\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">?column?\n--------\nf</code></pre></div>\n<h1 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h1>\n<ul>\n<li><a href=\"https://supabase.io/docs/guides/database/full-text-search\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://supabase.io/docs/guides/database/full-text-search</a></li>\n<li><a href=\"https://www.compose.com/articles/mastering-postgresql-tools-full-text-search-and-phrase-search/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.compose.com/articles/mastering-postgresql-tools-full-text-search-and-phrase-search/</a></li>\n<li><a href=\"https://www.postgresql.org/docs/9.5/textsearch.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.postgresql.org/docs/9.5/textsearch.html</a></li>\n</ul>","fields":{"slug":"/2021/07/postgres-full-text-search.html","tagSlugs":["/tag/data/","/tag/data-engineer/","/tag/database/","/tag/postgres/"]},"frontmatter":{"date":"2021-07-04T00:00:00.000+07:00","description":"Postgres has built-in functions to handle Full Text Search queries. This is like a \"search engine\" within Postgres.","tags":["Data","Data Engineer","Database","Postgres"],"title":"Postgres Full Text Search","fbCommentUrl":"none"}}},"pageContext":{"slug":"/2021/07/postgres-full-text-search.html"}},"staticQueryHashes":["251939775","2672868365","401334301"]}