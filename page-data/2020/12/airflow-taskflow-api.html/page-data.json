{"componentChunkName":"component---src-templates-post-template-js","path":"/2020/12/airflow-taskflow-api.html","result":{"data":{"markdownRemark":{"id":"b5257964-722c-502e-8ee3-beb94c82f54d","html":"<p>Chú trọng vào việc đơn giản hóa và rõ ràng cách viết Airflow DAG, cách trao đổi thông tin giữa các tasks, Airflow 2.0 ra mắt Taskflow API cho phép viết đơn giản và gọn gàng hơn so với cách truyền thống, đặc biệt vào các pipelines sử dụng PythonOperators.</p>\n<p>Sau đây là ví dụ khi sử dụng cách viết mới Taskflow API trong Airflow 2.0:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> urllib<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">,</span> json \n\n<span class=\"token keyword\">from</span> airflow<span class=\"token punctuation\">.</span>decorators <span class=\"token keyword\">import</span> dag<span class=\"token punctuation\">,</span> task\n<span class=\"token keyword\">from</span> airflow<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>dates <span class=\"token keyword\">import</span> days_ago\n\ndefault_args <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'owner'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'me@duyet.net'</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token decorator annotation punctuation\">@dag</span><span class=\"token punctuation\">(</span>default_args<span class=\"token operator\">=</span>default_args<span class=\"token punctuation\">,</span> schedule_interval<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> start_date<span class=\"token operator\">=</span>days_ago<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">taskflow_api_etl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token triple-quoted-string string\">\"\"\"\n  ### TaskFlow API ETL Documentation\n  This is document for this DAG\n  \"\"\"</span>\n  data_source_url <span class=\"token operator\">=</span> <span class=\"token string\">'https://data.duyet.net/_/orders/123.json'</span>\n\n  <span class=\"token decorator annotation punctuation\">@task</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">extract</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    #### Extract task\n    This is document for this task - extract().\n    A simple Extract task to get data ready for the rest of the data\n    pipeline. In this case, getting data from remote data source url.\n    \"\"\"</span>\n    src <span class=\"token operator\">=</span> urllib<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>urlopen<span class=\"token punctuation\">(</span>data_source_url<span class=\"token punctuation\">)</span>\n    data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">return</span> data\n\n  <span class=\"token decorator annotation punctuation\">@task</span><span class=\"token punctuation\">(</span>multiple_outputs<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">:</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    ### Transform task\n    \"\"\"</span>\n    total_order_value <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    order_keys <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> value <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      total_order_value <span class=\"token operator\">+=</span> value\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"total_order_value\"</span><span class=\"token punctuation\">:</span> total_order_value<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"order_keys\"</span><span class=\"token punctuation\">:</span> order_keys\n    <span class=\"token punctuation\">}</span>\n\n  <span class=\"token decorator annotation punctuation\">@task</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span>total_order_value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">,</span> order_keys<span class=\"token punctuation\">:</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Total order value is: %.2f\"</span> <span class=\"token operator\">%</span> total_order_value<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"List of order keys: %s\"</span> <span class=\"token operator\">%</span> order_keys<span class=\"token punctuation\">)</span>\n\n  order_data <span class=\"token operator\">=</span> extract<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  order_summary <span class=\"token operator\">=</span> transform<span class=\"token punctuation\">(</span>order_data<span class=\"token punctuation\">)</span>\n  load<span class=\"token punctuation\">(</span>order_summary<span class=\"token punctuation\">[</span><span class=\"token string\">\"total_order_value\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> order_summary<span class=\"token punctuation\">[</span><span class=\"token string\">\"order_keys\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\ndag <span class=\"token operator\">=</span> taskflow_api_etl<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"1-dag\" style=\"position:relative;\"><a href=\"#1-dag\" aria-label=\"1 dag permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. DAG</h2>\n<p>Đây là cách viết mới bằng cách sử dụng các Python decorators của Taskflow API: <code class=\"language-text\">@dag</code> và <code class=\"language-text\">@task</code></p>\n<p>Trong ví dụ trên, chúng ta sử dụng <code class=\"language-text\">@dag</code> decorator cho python function <code class=\"language-text\">taskflow_api_etl</code>, đây là <strong>DAG ID</strong>,\nphần mô tả nằm trong docblockr sẽ hiển thị trên Airflow webserver.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@dag</span><span class=\"token punctuation\">(</span>default_args<span class=\"token operator\">=</span>default_args<span class=\"token punctuation\">,</span> schedule_interval<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> start_date<span class=\"token operator\">=</span>days_ago<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">taskflow_api_etl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token triple-quoted-string string\">\"\"\"\n  ### TaskFlow API ETL Documentation\n  This is document for this DAG\n  \"\"\"</span></code></pre></div>\n<p>DAG cũng hỗ trợ parameterize nếu bạn thêm tham số vào DAG function, tham số này sẽ được sử dụng khi trigger DAG manually. Xem thêm về <a href=\"https://airflow.apache.org/docs/apache-airflow/stable/dag-run.html#dagrun-parameters\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Passing Parameters when triggering dags</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@dag</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">example_dag</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">'me@duyet.net'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<h2 id=\"2-tasks\" style=\"position:relative;\"><a href=\"#2-tasks\" aria-label=\"2 tasks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Tasks</h2>\n<p>Trong pipeline ở trên, ta có 3 tasks python function, sử dụng <code class=\"language-text\">@task</code> decorator. Tên của function dùng để đặt tên cho <code class=\"language-text\">task_id</code>. Cách viết mới này chỉ cần sử dụng <code class=\"language-text\">@task</code> thay vì định nghĩa python function rồi bỏ vào <code class=\"language-text\">PythonOperator</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@task</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">extract</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token triple-quoted-string string\">\"\"\"\n  #### Extract task\n  This is document for this task - extract().\n  A simple Extract task to get data ready for the rest of the data\n  pipeline. In this case, getting data from remote data source url.\n  \"\"\"</span>\n  src <span class=\"token operator\">=</span> urllib<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>urlopen<span class=\"token punctuation\">(</span>data_source_url<span class=\"token punctuation\">)</span>\n  data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  \n  <span class=\"token keyword\">return</span> data</code></pre></div>\n<p>Outputs và inputs sẽ được gửi qua lại giữa các tasks sử dụng <a href=\"https://airflow.apache.org/docs/apache-airflow/stable/concepts.html#concepts-xcom\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">XCom</a>.\nOutput return từ function task, được sử dụng để làm input cho các tasks tiếp theo. Với cách này, input và output, mối quan hệ giữa các task sẽ tường minh hơn.</p>\n<p>Sử dụng <code class=\"language-text\">@task(multiple_outputs=True)</code> để tách ra nhiều giá trị XCom nếu task task trả về một dictionaries, lists hoặc tuples. </p>\n<p>Ví dụ:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@task</span><span class=\"token punctuation\">(</span>multiple_outputs<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">:</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"total_order_value\"</span><span class=\"token punctuation\">:</span> total_order_value<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"order_keys\"</span><span class=\"token punctuation\">:</span> order_keys\n  <span class=\"token punctuation\">}</span>\n\noutput <span class=\"token operator\">=</span> transform<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">.</span>total_order_value<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">.</span>order_keys<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Nếu sử dụng typing <code class=\"language-text\">Dict</code> cho function return type thì <code class=\"language-text\">multiple_outputs</code> cũng tự động được set thành <code class=\"language-text\">True</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@task</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">identity_dict</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Dict<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">,</span> <span class=\"token string\">\"y\"</span><span class=\"token punctuation\">:</span> y<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nếu gọi decorated function nhiều lần trong 1 DAG, decorated function sẽ tự động generate ra các <code class=\"language-text\">task_id</code> mới.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@dag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">taskflow_api_etl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token decorator annotation punctuation\">@task</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">extract</span><span class=\"token punctuation\">(</span>uid<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># ...</span>\n    <span class=\"token keyword\">return</span> data\n\n  <span class=\"token comment\"># This will generate an operator for each uid</span>\n  <span class=\"token keyword\">for</span> uid <span class=\"token keyword\">in</span> user_ids<span class=\"token punctuation\">:</span>\n    extract<span class=\"token punctuation\">(</span>uid<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Ví dụ trên, DAG sẽ tạo ra các task ids sau: <code class=\"language-text\">[extract, extract__1, extract__2, ...]</code>.</p>\n<h2 id=\"3-context\" style=\"position:relative;\"><a href=\"#3-context\" aria-label=\"3 context permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Context</h2>\n<p>Để truy cập vào <a href=\"https://blog.duyet.net/2019/08/airflow-context.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">context</a>, bạn có thể sử dụng <code class=\"language-text\">get_current_context</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> airflow<span class=\"token punctuation\">.</span>operators<span class=\"token punctuation\">.</span>python <span class=\"token keyword\">import</span> task<span class=\"token punctuation\">,</span> get_current_context\n<span class=\"token decorator annotation punctuation\">@task</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">my_task</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    context <span class=\"token operator\">=</span> get_current_context<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    ti <span class=\"token operator\">=</span> context<span class=\"token punctuation\">[</span><span class=\"token string\">\"ti\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Gọi method này ngoài execution context sẽ raise error.</p>\n<h2 id=\"4-airflow-decorators-vs-operator\" style=\"position:relative;\"><a href=\"#4-airflow-decorators-vs-operator\" aria-label=\"4 airflow decorators vs operator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Airflow decorators vs Operator</h2>\n<p>Taskflow API decorators có thể được sử dụng kết hợp với các Operator truyền thống, như ví dụ dưới đây:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># ...</span>\n<span class=\"token keyword\">with</span> DAG<span class=\"token punctuation\">(</span><span class=\"token string\">'send_server_ip'</span><span class=\"token punctuation\">,</span> default_args<span class=\"token operator\">=</span>default_args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> dag<span class=\"token punctuation\">:</span>\n  get_ip <span class=\"token operator\">=</span> SimpleHttpOperator<span class=\"token punctuation\">(</span>task_id<span class=\"token operator\">=</span><span class=\"token string\">'get_ip'</span><span class=\"token punctuation\">,</span> xcom_push<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n  \n  <span class=\"token decorator annotation punctuation\">@task</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">prepare_email</span><span class=\"token punctuation\">(</span>raw_json<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Dict<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    external_ip <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>raw_json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'origin'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'subject'</span><span class=\"token punctuation\">:</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Server connected from </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>external_ip<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'body'</span><span class=\"token punctuation\">:</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'External IP </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>external_ip<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span>\n    <span class=\"token punctuation\">}</span>\n\n  email_info <span class=\"token operator\">=</span> prepare_email<span class=\"token punctuation\">(</span>get_ip<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">)</span>\n  send_email <span class=\"token operator\">=</span> EmailOperator<span class=\"token punctuation\">(</span>\n      task_id<span class=\"token operator\">=</span><span class=\"token string\">'send_email'</span><span class=\"token punctuation\">,</span>\n      to<span class=\"token operator\">=</span><span class=\"token string\">'example@example.com'</span><span class=\"token punctuation\">,</span>\n      subject<span class=\"token operator\">=</span>email_info<span class=\"token punctuation\">[</span><span class=\"token string\">'subject'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      html_content<span class=\"token operator\">=</span>email_info<span class=\"token punctuation\">[</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># ...</span>\n<span class=\"token decorator annotation punctuation\">@dag</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">send_server_ip</span><span class=\"token punctuation\">(</span>default_args<span class=\"token operator\">=</span>default_args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  get_ip <span class=\"token operator\">=</span> SimpleHttpOperator<span class=\"token punctuation\">(</span>task_id<span class=\"token operator\">=</span><span class=\"token string\">'get_ip'</span><span class=\"token punctuation\">,</span> xcom_push<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token decorator annotation punctuation\">@task</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">prepare_email</span><span class=\"token punctuation\">(</span>raw_json<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Dict<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    external_ip <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>raw_json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'origin'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'subject'</span><span class=\"token punctuation\">:</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Server connected from </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>external_ip<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'body'</span><span class=\"token punctuation\">:</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'External IP </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>external_ip<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span>\n    <span class=\"token punctuation\">}</span>\n\n  email_info <span class=\"token operator\">=</span> prepare_email<span class=\"token punctuation\">(</span>get_ip<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">)</span>\n  send_email <span class=\"token operator\">=</span> EmailOperator<span class=\"token punctuation\">(</span>\n      task_id<span class=\"token operator\">=</span><span class=\"token string\">'send_email'</span><span class=\"token punctuation\">,</span>\n      to<span class=\"token operator\">=</span><span class=\"token string\">'example@example.com'</span><span class=\"token punctuation\">,</span>\n      subject<span class=\"token operator\">=</span>email_info<span class=\"token punctuation\">[</span><span class=\"token string\">'subject'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      html_content<span class=\"token operator\">=</span>email_info<span class=\"token punctuation\">[</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span>\n\nDAG <span class=\"token operator\">=</span> send_server_ip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"kết\" style=\"position:relative;\"><a href=\"#k%E1%BA%BFt\" aria-label=\"kết permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kết</h2>\n<p>Bây giờ bạn đã biết khi viết 1 DAG sử dụng Taskflow API trong Airflow 2.0 sẽ đơn giản và tường minh hơn như thế nào. Tham khảo thêm tại trang <a href=\"https://airflow.apache.org/docs/apache-airflow/stable/concepts.html#concepts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Concepts</a> để xem các giải thích chi tiết về Airflow như DAGs, Tasks, Operators, … cũng như <a href=\"https://airflow.apache.org/docs/apache-airflow/stable/concepts.html#concepts-task-decorator\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Python task decorator</a>.</p>","fields":{"slug":"/2020/12/airflow-taskflow-api.html","tagSlugs":["/tag/airflow/","/tag/data-engineer/","/tag/airflow-2-0/"]},"frontmatter":{"date":"2020-12-26T00:00:00.000+07:00","description":"Chú trọng vào việc đơn giản hóa và rõ ràng cách viết Airflow DAG, cách trao đổi thông tin giữa các tasks, Airflow 2.0 ra mắt Taskflow API cho phép viết đơn giản và gọn gàng hơn so với cách truyền thống, đặc biệt vào các pipelines sử dụng PythonOperators.","tags":["Airflow","Data Engineer","Airflow 2.0"],"title":"Airflow 2.0 - Taskflow API","fbCommentUrl":"none"}}},"pageContext":{"slug":"/2020/12/airflow-taskflow-api.html"}}}